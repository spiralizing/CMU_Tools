# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ArticleProjectCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'tags': 'list[str]',
        'keywords': 'list[str]',
        'references': 'list[str]',
        'related_materials': 'list[RelatedMaterial]',
        'categories': 'list[int]',
        'categories_by_source_id': 'list[str]',
        'authors': 'list[object]',
        'custom_fields': 'object',
        'custom_fields_list': 'list[CustomArticleFieldAdd]',
        'defined_type': 'str',
        'funding': 'str',
        'funding_list': 'list[FundingCreate]',
        'license': 'int',
        'doi': 'str',
        'handle': 'str',
        'resource_doi': 'str',
        'resource_title': 'str',
        'timeline': 'TimelineUpdate'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'tags': 'tags',
        'keywords': 'keywords',
        'references': 'references',
        'related_materials': 'related_materials',
        'categories': 'categories',
        'categories_by_source_id': 'categories_by_source_id',
        'authors': 'authors',
        'custom_fields': 'custom_fields',
        'custom_fields_list': 'custom_fields_list',
        'defined_type': 'defined_type',
        'funding': 'funding',
        'funding_list': 'funding_list',
        'license': 'license',
        'doi': 'doi',
        'handle': 'handle',
        'resource_doi': 'resource_doi',
        'resource_title': 'resource_title',
        'timeline': 'timeline'
    }

    def __init__(self, title=None, description='', tags=None, keywords=None, references=None, related_materials=None, categories=None, categories_by_source_id=None, authors=None, custom_fields=None, custom_fields_list=None, defined_type=None, funding='', funding_list=None, license=0, doi='', handle='', resource_doi='', resource_title='', timeline=None, _configuration=None):  # noqa: E501
        """ArticleProjectCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._title = None
        self._description = None
        self._tags = None
        self._keywords = None
        self._references = None
        self._related_materials = None
        self._categories = None
        self._categories_by_source_id = None
        self._authors = None
        self._custom_fields = None
        self._custom_fields_list = None
        self._defined_type = None
        self._funding = None
        self._funding_list = None
        self._license = None
        self._doi = None
        self._handle = None
        self._resource_doi = None
        self._resource_title = None
        self._timeline = None
        self.discriminator = None

        self.title = title
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if keywords is not None:
            self.keywords = keywords
        if references is not None:
            self.references = references
        if related_materials is not None:
            self.related_materials = related_materials
        if categories is not None:
            self.categories = categories
        if categories_by_source_id is not None:
            self.categories_by_source_id = categories_by_source_id
        if authors is not None:
            self.authors = authors
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if custom_fields_list is not None:
            self.custom_fields_list = custom_fields_list
        if defined_type is not None:
            self.defined_type = defined_type
        if funding is not None:
            self.funding = funding
        if funding_list is not None:
            self.funding_list = funding_list
        if license is not None:
            self.license = license
        if doi is not None:
            self.doi = doi
        if handle is not None:
            self.handle = handle
        if resource_doi is not None:
            self.resource_doi = resource_doi
        if resource_title is not None:
            self.resource_title = resource_title
        if timeline is not None:
            self.timeline = timeline

    @property
    def title(self):
        """Gets the title of this ArticleProjectCreate.  # noqa: E501

        Title of article  # noqa: E501

        :return: The title of this ArticleProjectCreate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ArticleProjectCreate.

        Title of article  # noqa: E501

        :param title: The title of this ArticleProjectCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                title is not None and len(title) > 1000):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `1000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                title is not None and len(title) < 3):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `3`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this ArticleProjectCreate.  # noqa: E501

        The article description. In a publisher case, usually this is the remote article description  # noqa: E501

        :return: The description of this ArticleProjectCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ArticleProjectCreate.

        The article description. In a publisher case, usually this is the remote article description  # noqa: E501

        :param description: The description of this ArticleProjectCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 10000):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `10000`")  # noqa: E501

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this ArticleProjectCreate.  # noqa: E501

        List of tags to be associated with the article. Keywords can be used instead  # noqa: E501

        :return: The tags of this ArticleProjectCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ArticleProjectCreate.

        List of tags to be associated with the article. Keywords can be used instead  # noqa: E501

        :param tags: The tags of this ArticleProjectCreate.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def keywords(self):
        """Gets the keywords of this ArticleProjectCreate.  # noqa: E501

        List of tags to be associated with the article. Tags can be used instead  # noqa: E501

        :return: The keywords of this ArticleProjectCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this ArticleProjectCreate.

        List of tags to be associated with the article. Tags can be used instead  # noqa: E501

        :param keywords: The keywords of this ArticleProjectCreate.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def references(self):
        """Gets the references of this ArticleProjectCreate.  # noqa: E501

        List of links to be associated with the article (e.g [\"http://link1\", \"http://link2\", \"http://link3\"])  # noqa: E501

        :return: The references of this ArticleProjectCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this ArticleProjectCreate.

        List of links to be associated with the article (e.g [\"http://link1\", \"http://link2\", \"http://link3\"])  # noqa: E501

        :param references: The references of this ArticleProjectCreate.  # noqa: E501
        :type: list[str]
        """

        self._references = references

    @property
    def related_materials(self):
        """Gets the related_materials of this ArticleProjectCreate.  # noqa: E501

        List of related materials; supersedes references and resource DOI/title.  # noqa: E501

        :return: The related_materials of this ArticleProjectCreate.  # noqa: E501
        :rtype: list[RelatedMaterial]
        """
        return self._related_materials

    @related_materials.setter
    def related_materials(self, related_materials):
        """Sets the related_materials of this ArticleProjectCreate.

        List of related materials; supersedes references and resource DOI/title.  # noqa: E501

        :param related_materials: The related_materials of this ArticleProjectCreate.  # noqa: E501
        :type: list[RelatedMaterial]
        """

        self._related_materials = related_materials

    @property
    def categories(self):
        """Gets the categories of this ArticleProjectCreate.  # noqa: E501

        List of category ids to be associated with the article(e.g [1, 23, 33, 66])  # noqa: E501

        :return: The categories of this ArticleProjectCreate.  # noqa: E501
        :rtype: list[int]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ArticleProjectCreate.

        List of category ids to be associated with the article(e.g [1, 23, 33, 66])  # noqa: E501

        :param categories: The categories of this ArticleProjectCreate.  # noqa: E501
        :type: list[int]
        """

        self._categories = categories

    @property
    def categories_by_source_id(self):
        """Gets the categories_by_source_id of this ArticleProjectCreate.  # noqa: E501

        List of category source ids to be associated with the article, supersedes the categories property  # noqa: E501

        :return: The categories_by_source_id of this ArticleProjectCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories_by_source_id

    @categories_by_source_id.setter
    def categories_by_source_id(self, categories_by_source_id):
        """Sets the categories_by_source_id of this ArticleProjectCreate.

        List of category source ids to be associated with the article, supersedes the categories property  # noqa: E501

        :param categories_by_source_id: The categories_by_source_id of this ArticleProjectCreate.  # noqa: E501
        :type: list[str]
        """

        self._categories_by_source_id = categories_by_source_id

    @property
    def authors(self):
        """Gets the authors of this ArticleProjectCreate.  # noqa: E501

        List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. For adding more authors use the specific authors endpoint.  # noqa: E501

        :return: The authors of this ArticleProjectCreate.  # noqa: E501
        :rtype: list[object]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this ArticleProjectCreate.

        List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. For adding more authors use the specific authors endpoint.  # noqa: E501

        :param authors: The authors of this ArticleProjectCreate.  # noqa: E501
        :type: list[object]
        """

        self._authors = authors

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ArticleProjectCreate.  # noqa: E501

        List of key, values pairs to be associated with the article  # noqa: E501

        :return: The custom_fields of this ArticleProjectCreate.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ArticleProjectCreate.

        List of key, values pairs to be associated with the article  # noqa: E501

        :param custom_fields: The custom_fields of this ArticleProjectCreate.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    @property
    def custom_fields_list(self):
        """Gets the custom_fields_list of this ArticleProjectCreate.  # noqa: E501

        List of custom fields values, supersedes custom_fields parameter  # noqa: E501

        :return: The custom_fields_list of this ArticleProjectCreate.  # noqa: E501
        :rtype: list[CustomArticleFieldAdd]
        """
        return self._custom_fields_list

    @custom_fields_list.setter
    def custom_fields_list(self, custom_fields_list):
        """Sets the custom_fields_list of this ArticleProjectCreate.

        List of custom fields values, supersedes custom_fields parameter  # noqa: E501

        :param custom_fields_list: The custom_fields_list of this ArticleProjectCreate.  # noqa: E501
        :type: list[CustomArticleFieldAdd]
        """

        self._custom_fields_list = custom_fields_list

    @property
    def defined_type(self):
        """Gets the defined_type of this ArticleProjectCreate.  # noqa: E501

        <b>One of:</b> <code>figure</code> <code>online resource</code> <code>preprint</code> <code>book</code> <code>conference contribution</code> <code>media</code> <code>dataset</code> <code>poster</code> <code>journal contribution</code> <code>presentation</code> <code>thesis</code> <code>software</code>  # noqa: E501

        :return: The defined_type of this ArticleProjectCreate.  # noqa: E501
        :rtype: str
        """
        return self._defined_type

    @defined_type.setter
    def defined_type(self, defined_type):
        """Sets the defined_type of this ArticleProjectCreate.

        <b>One of:</b> <code>figure</code> <code>online resource</code> <code>preprint</code> <code>book</code> <code>conference contribution</code> <code>media</code> <code>dataset</code> <code>poster</code> <code>journal contribution</code> <code>presentation</code> <code>thesis</code> <code>software</code>  # noqa: E501

        :param defined_type: The defined_type of this ArticleProjectCreate.  # noqa: E501
        :type: str
        """

        self._defined_type = defined_type

    @property
    def funding(self):
        """Gets the funding of this ArticleProjectCreate.  # noqa: E501

        Grant number or funding authority  # noqa: E501

        :return: The funding of this ArticleProjectCreate.  # noqa: E501
        :rtype: str
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this ArticleProjectCreate.

        Grant number or funding authority  # noqa: E501

        :param funding: The funding of this ArticleProjectCreate.  # noqa: E501
        :type: str
        """

        self._funding = funding

    @property
    def funding_list(self):
        """Gets the funding_list of this ArticleProjectCreate.  # noqa: E501

        Funding creation / update items  # noqa: E501

        :return: The funding_list of this ArticleProjectCreate.  # noqa: E501
        :rtype: list[FundingCreate]
        """
        return self._funding_list

    @funding_list.setter
    def funding_list(self, funding_list):
        """Sets the funding_list of this ArticleProjectCreate.

        Funding creation / update items  # noqa: E501

        :param funding_list: The funding_list of this ArticleProjectCreate.  # noqa: E501
        :type: list[FundingCreate]
        """

        self._funding_list = funding_list

    @property
    def license(self):
        """Gets the license of this ArticleProjectCreate.  # noqa: E501

        License id for this article.  # noqa: E501

        :return: The license of this ArticleProjectCreate.  # noqa: E501
        :rtype: int
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this ArticleProjectCreate.

        License id for this article.  # noqa: E501

        :param license: The license of this ArticleProjectCreate.  # noqa: E501
        :type: int
        """

        self._license = license

    @property
    def doi(self):
        """Gets the doi of this ArticleProjectCreate.  # noqa: E501

        Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.  # noqa: E501

        :return: The doi of this ArticleProjectCreate.  # noqa: E501
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this ArticleProjectCreate.

        Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.  # noqa: E501

        :param doi: The doi of this ArticleProjectCreate.  # noqa: E501
        :type: str
        """

        self._doi = doi

    @property
    def handle(self):
        """Gets the handle of this ArticleProjectCreate.  # noqa: E501

        Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.  # noqa: E501

        :return: The handle of this ArticleProjectCreate.  # noqa: E501
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this ArticleProjectCreate.

        Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.  # noqa: E501

        :param handle: The handle of this ArticleProjectCreate.  # noqa: E501
        :type: str
        """

        self._handle = handle

    @property
    def resource_doi(self):
        """Gets the resource_doi of this ArticleProjectCreate.  # noqa: E501

        Deprecated by related materials. Not applicable to regular users. In a publisher case, this is the publisher article DOI.  # noqa: E501

        :return: The resource_doi of this ArticleProjectCreate.  # noqa: E501
        :rtype: str
        """
        return self._resource_doi

    @resource_doi.setter
    def resource_doi(self, resource_doi):
        """Sets the resource_doi of this ArticleProjectCreate.

        Deprecated by related materials. Not applicable to regular users. In a publisher case, this is the publisher article DOI.  # noqa: E501

        :param resource_doi: The resource_doi of this ArticleProjectCreate.  # noqa: E501
        :type: str
        """

        self._resource_doi = resource_doi

    @property
    def resource_title(self):
        """Gets the resource_title of this ArticleProjectCreate.  # noqa: E501

        Deprecated by related materials. Not applicable to regular users. In a publisher case, this is the publisher article title.  # noqa: E501

        :return: The resource_title of this ArticleProjectCreate.  # noqa: E501
        :rtype: str
        """
        return self._resource_title

    @resource_title.setter
    def resource_title(self, resource_title):
        """Sets the resource_title of this ArticleProjectCreate.

        Deprecated by related materials. Not applicable to regular users. In a publisher case, this is the publisher article title.  # noqa: E501

        :param resource_title: The resource_title of this ArticleProjectCreate.  # noqa: E501
        :type: str
        """

        self._resource_title = resource_title

    @property
    def timeline(self):
        """Gets the timeline of this ArticleProjectCreate.  # noqa: E501

        Various timeline dates  # noqa: E501

        :return: The timeline of this ArticleProjectCreate.  # noqa: E501
        :rtype: TimelineUpdate
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this ArticleProjectCreate.

        Various timeline dates  # noqa: E501

        :param timeline: The timeline of this ArticleProjectCreate.  # noqa: E501
        :type: TimelineUpdate
        """

        self._timeline = timeline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArticleProjectCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArticleProjectCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ArticleProjectCreate):
            return True

        return self.to_dict() != other.to_dict()
