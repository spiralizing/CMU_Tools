# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ItemType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'string_id': 'str',
        'icon': 'str',
        'public_description': 'str',
        'is_selectable': 'bool',
        'url_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'string_id': 'string_id',
        'icon': 'icon',
        'public_description': 'public_description',
        'is_selectable': 'is_selectable',
        'url_name': 'url_name'
    }

    def __init__(self, id=None, name=None, string_id=None, icon=None, public_description=None, is_selectable=None, url_name=None, _configuration=None):  # noqa: E501
        """ItemType - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._string_id = None
        self._icon = None
        self._public_description = None
        self._is_selectable = None
        self._url_name = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.string_id = string_id
        self.icon = icon
        self.public_description = public_description
        self.is_selectable = is_selectable
        self.url_name = url_name

    @property
    def id(self):
        """Gets the id of this ItemType.  # noqa: E501

        The ID of the item type.  # noqa: E501

        :return: The id of this ItemType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemType.

        The ID of the item type.  # noqa: E501

        :param id: The id of this ItemType.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and id < 1):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ItemType.  # noqa: E501

        The name of the item type  # noqa: E501

        :return: The name of this ItemType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemType.

        The name of the item type  # noqa: E501

        :param name: The name of this ItemType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def string_id(self):
        """Gets the string_id of this ItemType.  # noqa: E501

        The string identifier of the item type.  # noqa: E501

        :return: The string_id of this ItemType.  # noqa: E501
        :rtype: str
        """
        return self._string_id

    @string_id.setter
    def string_id(self, string_id):
        """Sets the string_id of this ItemType.

        The string identifier of the item type.  # noqa: E501

        :param string_id: The string_id of this ItemType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and string_id is None:
            raise ValueError("Invalid value for `string_id`, must not be `None`")  # noqa: E501

        self._string_id = string_id

    @property
    def icon(self):
        """Gets the icon of this ItemType.  # noqa: E501

        The string identifying the icon of the item type.  # noqa: E501

        :return: The icon of this ItemType.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this ItemType.

        The string identifying the icon of the item type.  # noqa: E501

        :param icon: The icon of this ItemType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")  # noqa: E501

        self._icon = icon

    @property
    def public_description(self):
        """Gets the public_description of this ItemType.  # noqa: E501

        The description of the item type.  # noqa: E501

        :return: The public_description of this ItemType.  # noqa: E501
        :rtype: str
        """
        return self._public_description

    @public_description.setter
    def public_description(self, public_description):
        """Sets the public_description of this ItemType.

        The description of the item type.  # noqa: E501

        :param public_description: The public_description of this ItemType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and public_description is None:
            raise ValueError("Invalid value for `public_description`, must not be `None`")  # noqa: E501

        self._public_description = public_description

    @property
    def is_selectable(self):
        """Gets the is_selectable of this ItemType.  # noqa: E501

        The selectable status  # noqa: E501

        :return: The is_selectable of this ItemType.  # noqa: E501
        :rtype: bool
        """
        return self._is_selectable

    @is_selectable.setter
    def is_selectable(self, is_selectable):
        """Sets the is_selectable of this ItemType.

        The selectable status  # noqa: E501

        :param is_selectable: The is_selectable of this ItemType.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_selectable is None:
            raise ValueError("Invalid value for `is_selectable`, must not be `None`")  # noqa: E501

        self._is_selectable = is_selectable

    @property
    def url_name(self):
        """Gets the url_name of this ItemType.  # noqa: E501

        The URL name of the item type.  # noqa: E501

        :return: The url_name of this ItemType.  # noqa: E501
        :rtype: str
        """
        return self._url_name

    @url_name.setter
    def url_name(self, url_name):
        """Sets the url_name of this ItemType.

        The URL name of the item type.  # noqa: E501

        :param url_name: The url_name of this ItemType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url_name is None:
            raise ValueError("Invalid value for `url_name`, must not be `None`")  # noqa: E501

        self._url_name = url_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemType):
            return True

        return self.to_dict() != other.to_dict()
