# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RelatedMaterial(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'identifier': 'str',
        'title': 'str',
        'relation': 'str',
        'identifier_type': 'str',
        'is_linkout': 'bool',
        'link': 'str'
    }

    attribute_map = {
        'id': 'id',
        'identifier': 'identifier',
        'title': 'title',
        'relation': 'relation',
        'identifier_type': 'identifier_type',
        'is_linkout': 'is_linkout',
        'link': 'link'
    }

    def __init__(self, id=None, identifier=None, title=None, relation='References', identifier_type='URL', is_linkout=None, link=None, _configuration=None):  # noqa: E501
        """RelatedMaterial - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._identifier = None
        self._title = None
        self._relation = None
        self._identifier_type = None
        self._is_linkout = None
        self._link = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if identifier is not None:
            self.identifier = identifier
        if title is not None:
            self.title = title
        if relation is not None:
            self.relation = relation
        if identifier_type is not None:
            self.identifier_type = identifier_type
        if is_linkout is not None:
            self.is_linkout = is_linkout
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this RelatedMaterial.  # noqa: E501

        The ID of the related material; can be used to add existing materials of the same account to items.  # noqa: E501

        :return: The id of this RelatedMaterial.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RelatedMaterial.

        The ID of the related material; can be used to add existing materials of the same account to items.  # noqa: E501

        :param id: The id of this RelatedMaterial.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this RelatedMaterial.  # noqa: E501

        The related material identifier (e.g., DOI, Handle, ISBN). Mandatory if creating a new material.  # noqa: E501

        :return: The identifier of this RelatedMaterial.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this RelatedMaterial.

        The related material identifier (e.g., DOI, Handle, ISBN). Mandatory if creating a new material.  # noqa: E501

        :param identifier: The identifier of this RelatedMaterial.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def title(self):
        """Gets the title of this RelatedMaterial.  # noqa: E501

        The related material title  # noqa: E501

        :return: The title of this RelatedMaterial.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RelatedMaterial.

        The related material title  # noqa: E501

        :param title: The title of this RelatedMaterial.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def relation(self):
        """Gets the relation of this RelatedMaterial.  # noqa: E501

        The relation between the item and the related material; defaults to 'References'. Mandatory if creating a new material.  # noqa: E501

        :return: The relation of this RelatedMaterial.  # noqa: E501
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this RelatedMaterial.

        The relation between the item and the related material; defaults to 'References'. Mandatory if creating a new material.  # noqa: E501

        :param relation: The relation of this RelatedMaterial.  # noqa: E501
        :type: str
        """
        allowed_values = ["IsCitedBy", "Cites", "IsSupplementTo", "IsSupplementedBy", "IsContinuedBy", "Continues", "Describes", "IsDescribedBy", "HasMetadata", "IsMetadataFor", "HasVersion", "IsVersionOf", "IsNewVersionOf", "IsPreviousVersionOf", "IsPartOf", "HasPart", "IsPublishedIn", "IsReferencedBy", "References", "IsDocumentedBy", "Documents", "IsCompiledBy", "Compiles", "IsVariantFormOf", "IsOriginalFormOf", "IsIdenticalTo", "IsReviewedBy", "Reviews", "IsDerivedFrom", "IsSourceOf", "IsRequiredBy", "Requires", "IsObsoletedBy", "Obsoletes"]  # noqa: E501
        if (self._configuration.client_side_validation and
                relation not in allowed_values):
            raise ValueError(
                "Invalid value for `relation` ({0}), must be one of {1}"  # noqa: E501
                .format(relation, allowed_values)
            )

        self._relation = relation

    @property
    def identifier_type(self):
        """Gets the identifier_type of this RelatedMaterial.  # noqa: E501

        The type of the identifier of the related material; defaults to 'URL'. Mandatory if creating a new material.  # noqa: E501

        :return: The identifier_type of this RelatedMaterial.  # noqa: E501
        :rtype: str
        """
        return self._identifier_type

    @identifier_type.setter
    def identifier_type(self, identifier_type):
        """Sets the identifier_type of this RelatedMaterial.

        The type of the identifier of the related material; defaults to 'URL'. Mandatory if creating a new material.  # noqa: E501

        :param identifier_type: The identifier_type of this RelatedMaterial.  # noqa: E501
        :type: str
        """
        allowed_values = ["ARK", "arXiv", "bibcode", "DOI", "EAN13", "EISSN", "Handle", "IGSN", "ISBN", "ISSN", "ISTC", "LISSN", "LSID", "PMID", "PURL", "UPC", "URL", "URN", "w3id"]  # noqa: E501
        if (self._configuration.client_side_validation and
                identifier_type not in allowed_values):
            raise ValueError(
                "Invalid value for `identifier_type` ({0}), must be one of {1}"  # noqa: E501
                .format(identifier_type, allowed_values)
            )

        self._identifier_type = identifier_type

    @property
    def is_linkout(self):
        """Gets the is_linkout of this RelatedMaterial.  # noqa: E501

        Flag for highlighting this related material in the call-out box  # noqa: E501

        :return: The is_linkout of this RelatedMaterial.  # noqa: E501
        :rtype: bool
        """
        return self._is_linkout

    @is_linkout.setter
    def is_linkout(self, is_linkout):
        """Sets the is_linkout of this RelatedMaterial.

        Flag for highlighting this related material in the call-out box  # noqa: E501

        :param is_linkout: The is_linkout of this RelatedMaterial.  # noqa: E501
        :type: bool
        """

        self._is_linkout = is_linkout

    @property
    def link(self):
        """Gets the link of this RelatedMaterial.  # noqa: E501

        The full hyperlink for the identifier. Automatically generated by Figshare.  # noqa: E501

        :return: The link of this RelatedMaterial.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this RelatedMaterial.

        The full hyperlink for the identifier. Automatically generated by Figshare.  # noqa: E501

        :param link: The link of this RelatedMaterial.  # noqa: E501
        :type: str
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RelatedMaterial, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelatedMaterial):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RelatedMaterial):
            return True

        return self.to_dict() != other.to_dict()
