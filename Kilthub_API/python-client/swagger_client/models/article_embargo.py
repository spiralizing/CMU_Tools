# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ArticleEmbargo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_embargoed': 'bool',
        'embargo_title': 'str',
        'embargo_reason': 'str',
        'embargo_options': 'list[object]'
    }

    attribute_map = {
        'is_embargoed': 'is_embargoed',
        'embargo_title': 'embargo_title',
        'embargo_reason': 'embargo_reason',
        'embargo_options': 'embargo_options'
    }

    def __init__(self, is_embargoed=None, embargo_title=None, embargo_reason=None, embargo_options=None, _configuration=None):  # noqa: E501
        """ArticleEmbargo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_embargoed = None
        self._embargo_title = None
        self._embargo_reason = None
        self._embargo_options = None
        self.discriminator = None

        self.is_embargoed = is_embargoed
        self.embargo_title = embargo_title
        self.embargo_reason = embargo_reason
        self.embargo_options = embargo_options

    @property
    def is_embargoed(self):
        """Gets the is_embargoed of this ArticleEmbargo.  # noqa: E501

        True if embargoed  # noqa: E501

        :return: The is_embargoed of this ArticleEmbargo.  # noqa: E501
        :rtype: bool
        """
        return self._is_embargoed

    @is_embargoed.setter
    def is_embargoed(self, is_embargoed):
        """Sets the is_embargoed of this ArticleEmbargo.

        True if embargoed  # noqa: E501

        :param is_embargoed: The is_embargoed of this ArticleEmbargo.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_embargoed is None:
            raise ValueError("Invalid value for `is_embargoed`, must not be `None`")  # noqa: E501

        self._is_embargoed = is_embargoed

    @property
    def embargo_title(self):
        """Gets the embargo_title of this ArticleEmbargo.  # noqa: E501

        Title for embargo  # noqa: E501

        :return: The embargo_title of this ArticleEmbargo.  # noqa: E501
        :rtype: str
        """
        return self._embargo_title

    @embargo_title.setter
    def embargo_title(self, embargo_title):
        """Sets the embargo_title of this ArticleEmbargo.

        Title for embargo  # noqa: E501

        :param embargo_title: The embargo_title of this ArticleEmbargo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and embargo_title is None:
            raise ValueError("Invalid value for `embargo_title`, must not be `None`")  # noqa: E501

        self._embargo_title = embargo_title

    @property
    def embargo_reason(self):
        """Gets the embargo_reason of this ArticleEmbargo.  # noqa: E501

        Reason for embargo  # noqa: E501

        :return: The embargo_reason of this ArticleEmbargo.  # noqa: E501
        :rtype: str
        """
        return self._embargo_reason

    @embargo_reason.setter
    def embargo_reason(self, embargo_reason):
        """Sets the embargo_reason of this ArticleEmbargo.

        Reason for embargo  # noqa: E501

        :param embargo_reason: The embargo_reason of this ArticleEmbargo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and embargo_reason is None:
            raise ValueError("Invalid value for `embargo_reason`, must not be `None`")  # noqa: E501

        self._embargo_reason = embargo_reason

    @property
    def embargo_options(self):
        """Gets the embargo_options of this ArticleEmbargo.  # noqa: E501

        List of embargo permissions that are associated with the article. If the type is logged_in and the group_ids list is empty, then the whole institution can see the article; if there are multiple group_ids, then only users that are under those groups can see the article.  # noqa: E501

        :return: The embargo_options of this ArticleEmbargo.  # noqa: E501
        :rtype: list[object]
        """
        return self._embargo_options

    @embargo_options.setter
    def embargo_options(self, embargo_options):
        """Sets the embargo_options of this ArticleEmbargo.

        List of embargo permissions that are associated with the article. If the type is logged_in and the group_ids list is empty, then the whole institution can see the article; if there are multiple group_ids, then only users that are under those groups can see the article.  # noqa: E501

        :param embargo_options: The embargo_options of this ArticleEmbargo.  # noqa: E501
        :type: list[object]
        """
        if self._configuration.client_side_validation and embargo_options is None:
            raise ValueError("Invalid value for `embargo_options`, must not be `None`")  # noqa: E501

        self._embargo_options = embargo_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArticleEmbargo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArticleEmbargo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ArticleEmbargo):
            return True

        return self.to_dict() != other.to_dict()
