# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CollectionComplete(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'funding': 'list[FundingInformation]',
        'resource_id': 'str',
        'resource_doi': 'str',
        'resource_title': 'str',
        'resource_link': 'str',
        'resource_version': 'int',
        'version': 'int',
        'description': 'str',
        'categories': 'list[Category]',
        'references': 'list[str]',
        'tags': 'list[str]',
        'authors': 'list[Author]',
        'institution_id': 'int',
        'group_id': 'int',
        'articles_count': 'int',
        'public': 'bool',
        'citation': 'str',
        'custom_fields': 'list[CustomArticleField]',
        'modified_date': 'str',
        'created_date': 'str',
        'timeline': 'Timeline'
    }

    attribute_map = {
        'funding': 'funding',
        'resource_id': 'resource_id',
        'resource_doi': 'resource_doi',
        'resource_title': 'resource_title',
        'resource_link': 'resource_link',
        'resource_version': 'resource_version',
        'version': 'version',
        'description': 'description',
        'categories': 'categories',
        'references': 'references',
        'tags': 'tags',
        'authors': 'authors',
        'institution_id': 'institution_id',
        'group_id': 'group_id',
        'articles_count': 'articles_count',
        'public': 'public',
        'citation': 'citation',
        'custom_fields': 'custom_fields',
        'modified_date': 'modified_date',
        'created_date': 'created_date',
        'timeline': 'timeline'
    }

    def __init__(self, funding=None, resource_id=None, resource_doi=None, resource_title=None, resource_link=None, resource_version=None, version=None, description=None, categories=None, references=None, tags=None, authors=None, institution_id=None, group_id=None, articles_count=None, public=None, citation=None, custom_fields=None, modified_date=None, created_date=None, timeline=None, _configuration=None):  # noqa: E501
        """CollectionComplete - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._funding = None
        self._resource_id = None
        self._resource_doi = None
        self._resource_title = None
        self._resource_link = None
        self._resource_version = None
        self._version = None
        self._description = None
        self._categories = None
        self._references = None
        self._tags = None
        self._authors = None
        self._institution_id = None
        self._group_id = None
        self._articles_count = None
        self._public = None
        self._citation = None
        self._custom_fields = None
        self._modified_date = None
        self._created_date = None
        self._timeline = None
        self.discriminator = None

        self.funding = funding
        self.resource_id = resource_id
        self.resource_doi = resource_doi
        self.resource_title = resource_title
        self.resource_link = resource_link
        self.resource_version = resource_version
        self.version = version
        self.description = description
        self.categories = categories
        self.references = references
        self.tags = tags
        self.authors = authors
        self.institution_id = institution_id
        self.group_id = group_id
        self.articles_count = articles_count
        self.public = public
        self.citation = citation
        self.custom_fields = custom_fields
        self.modified_date = modified_date
        self.created_date = created_date
        self.timeline = timeline

    @property
    def funding(self):
        """Gets the funding of this CollectionComplete.  # noqa: E501

        Full Collection funding information  # noqa: E501

        :return: The funding of this CollectionComplete.  # noqa: E501
        :rtype: list[FundingInformation]
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this CollectionComplete.

        Full Collection funding information  # noqa: E501

        :param funding: The funding of this CollectionComplete.  # noqa: E501
        :type: list[FundingInformation]
        """
        if self._configuration.client_side_validation and funding is None:
            raise ValueError("Invalid value for `funding`, must not be `None`")  # noqa: E501

        self._funding = funding

    @property
    def resource_id(self):
        """Gets the resource_id of this CollectionComplete.  # noqa: E501

        Collection resource id  # noqa: E501

        :return: The resource_id of this CollectionComplete.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CollectionComplete.

        Collection resource id  # noqa: E501

        :param resource_id: The resource_id of this CollectionComplete.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def resource_doi(self):
        """Gets the resource_doi of this CollectionComplete.  # noqa: E501

        Collection resource doi  # noqa: E501

        :return: The resource_doi of this CollectionComplete.  # noqa: E501
        :rtype: str
        """
        return self._resource_doi

    @resource_doi.setter
    def resource_doi(self, resource_doi):
        """Sets the resource_doi of this CollectionComplete.

        Collection resource doi  # noqa: E501

        :param resource_doi: The resource_doi of this CollectionComplete.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource_doi is None:
            raise ValueError("Invalid value for `resource_doi`, must not be `None`")  # noqa: E501

        self._resource_doi = resource_doi

    @property
    def resource_title(self):
        """Gets the resource_title of this CollectionComplete.  # noqa: E501

        Collection resource title  # noqa: E501

        :return: The resource_title of this CollectionComplete.  # noqa: E501
        :rtype: str
        """
        return self._resource_title

    @resource_title.setter
    def resource_title(self, resource_title):
        """Sets the resource_title of this CollectionComplete.

        Collection resource title  # noqa: E501

        :param resource_title: The resource_title of this CollectionComplete.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource_title is None:
            raise ValueError("Invalid value for `resource_title`, must not be `None`")  # noqa: E501

        self._resource_title = resource_title

    @property
    def resource_link(self):
        """Gets the resource_link of this CollectionComplete.  # noqa: E501

        Collection resource link  # noqa: E501

        :return: The resource_link of this CollectionComplete.  # noqa: E501
        :rtype: str
        """
        return self._resource_link

    @resource_link.setter
    def resource_link(self, resource_link):
        """Sets the resource_link of this CollectionComplete.

        Collection resource link  # noqa: E501

        :param resource_link: The resource_link of this CollectionComplete.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource_link is None:
            raise ValueError("Invalid value for `resource_link`, must not be `None`")  # noqa: E501

        self._resource_link = resource_link

    @property
    def resource_version(self):
        """Gets the resource_version of this CollectionComplete.  # noqa: E501

        Collection resource version  # noqa: E501

        :return: The resource_version of this CollectionComplete.  # noqa: E501
        :rtype: int
        """
        return self._resource_version

    @resource_version.setter
    def resource_version(self, resource_version):
        """Sets the resource_version of this CollectionComplete.

        Collection resource version  # noqa: E501

        :param resource_version: The resource_version of this CollectionComplete.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and resource_version is None:
            raise ValueError("Invalid value for `resource_version`, must not be `None`")  # noqa: E501

        self._resource_version = resource_version

    @property
    def version(self):
        """Gets the version of this CollectionComplete.  # noqa: E501

        Collection version  # noqa: E501

        :return: The version of this CollectionComplete.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CollectionComplete.

        Collection version  # noqa: E501

        :param version: The version of this CollectionComplete.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def description(self):
        """Gets the description of this CollectionComplete.  # noqa: E501

        Collection description  # noqa: E501

        :return: The description of this CollectionComplete.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CollectionComplete.

        Collection description  # noqa: E501

        :param description: The description of this CollectionComplete.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def categories(self):
        """Gets the categories of this CollectionComplete.  # noqa: E501

        List of collection categories  # noqa: E501

        :return: The categories of this CollectionComplete.  # noqa: E501
        :rtype: list[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this CollectionComplete.

        List of collection categories  # noqa: E501

        :param categories: The categories of this CollectionComplete.  # noqa: E501
        :type: list[Category]
        """
        if self._configuration.client_side_validation and categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    @property
    def references(self):
        """Gets the references of this CollectionComplete.  # noqa: E501

        List of collection references  # noqa: E501

        :return: The references of this CollectionComplete.  # noqa: E501
        :rtype: list[str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this CollectionComplete.

        List of collection references  # noqa: E501

        :param references: The references of this CollectionComplete.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and references is None:
            raise ValueError("Invalid value for `references`, must not be `None`")  # noqa: E501

        self._references = references

    @property
    def tags(self):
        """Gets the tags of this CollectionComplete.  # noqa: E501

        List of collection tags  # noqa: E501

        :return: The tags of this CollectionComplete.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CollectionComplete.

        List of collection tags  # noqa: E501

        :param tags: The tags of this CollectionComplete.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def authors(self):
        """Gets the authors of this CollectionComplete.  # noqa: E501

        List of collection authors  # noqa: E501

        :return: The authors of this CollectionComplete.  # noqa: E501
        :rtype: list[Author]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this CollectionComplete.

        List of collection authors  # noqa: E501

        :param authors: The authors of this CollectionComplete.  # noqa: E501
        :type: list[Author]
        """
        if self._configuration.client_side_validation and authors is None:
            raise ValueError("Invalid value for `authors`, must not be `None`")  # noqa: E501

        self._authors = authors

    @property
    def institution_id(self):
        """Gets the institution_id of this CollectionComplete.  # noqa: E501

        Collection institution  # noqa: E501

        :return: The institution_id of this CollectionComplete.  # noqa: E501
        :rtype: int
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this CollectionComplete.

        Collection institution  # noqa: E501

        :param institution_id: The institution_id of this CollectionComplete.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and institution_id is None:
            raise ValueError("Invalid value for `institution_id`, must not be `None`")  # noqa: E501

        self._institution_id = institution_id

    @property
    def group_id(self):
        """Gets the group_id of this CollectionComplete.  # noqa: E501

        Collection group  # noqa: E501

        :return: The group_id of this CollectionComplete.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CollectionComplete.

        Collection group  # noqa: E501

        :param group_id: The group_id of this CollectionComplete.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def articles_count(self):
        """Gets the articles_count of this CollectionComplete.  # noqa: E501

        Number of articles in collection  # noqa: E501

        :return: The articles_count of this CollectionComplete.  # noqa: E501
        :rtype: int
        """
        return self._articles_count

    @articles_count.setter
    def articles_count(self, articles_count):
        """Sets the articles_count of this CollectionComplete.

        Number of articles in collection  # noqa: E501

        :param articles_count: The articles_count of this CollectionComplete.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and articles_count is None:
            raise ValueError("Invalid value for `articles_count`, must not be `None`")  # noqa: E501

        self._articles_count = articles_count

    @property
    def public(self):
        """Gets the public of this CollectionComplete.  # noqa: E501

        True if collection is published  # noqa: E501

        :return: The public of this CollectionComplete.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this CollectionComplete.

        True if collection is published  # noqa: E501

        :param public: The public of this CollectionComplete.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and public is None:
            raise ValueError("Invalid value for `public`, must not be `None`")  # noqa: E501

        self._public = public

    @property
    def citation(self):
        """Gets the citation of this CollectionComplete.  # noqa: E501

        Collection citation  # noqa: E501

        :return: The citation of this CollectionComplete.  # noqa: E501
        :rtype: str
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this CollectionComplete.

        Collection citation  # noqa: E501

        :param citation: The citation of this CollectionComplete.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and citation is None:
            raise ValueError("Invalid value for `citation`, must not be `None`")  # noqa: E501

        self._citation = citation

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CollectionComplete.  # noqa: E501

        Collection custom fields  # noqa: E501

        :return: The custom_fields of this CollectionComplete.  # noqa: E501
        :rtype: list[CustomArticleField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CollectionComplete.

        Collection custom fields  # noqa: E501

        :param custom_fields: The custom_fields of this CollectionComplete.  # noqa: E501
        :type: list[CustomArticleField]
        """
        if self._configuration.client_side_validation and custom_fields is None:
            raise ValueError("Invalid value for `custom_fields`, must not be `None`")  # noqa: E501

        self._custom_fields = custom_fields

    @property
    def modified_date(self):
        """Gets the modified_date of this CollectionComplete.  # noqa: E501

        Date when collection was last modified  # noqa: E501

        :return: The modified_date of this CollectionComplete.  # noqa: E501
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CollectionComplete.

        Date when collection was last modified  # noqa: E501

        :param modified_date: The modified_date of this CollectionComplete.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and modified_date is None:
            raise ValueError("Invalid value for `modified_date`, must not be `None`")  # noqa: E501

        self._modified_date = modified_date

    @property
    def created_date(self):
        """Gets the created_date of this CollectionComplete.  # noqa: E501

        Date when collection was created  # noqa: E501

        :return: The created_date of this CollectionComplete.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CollectionComplete.

        Date when collection was created  # noqa: E501

        :param created_date: The created_date of this CollectionComplete.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def timeline(self):
        """Gets the timeline of this CollectionComplete.  # noqa: E501

        Various timeline dates  # noqa: E501

        :return: The timeline of this CollectionComplete.  # noqa: E501
        :rtype: Timeline
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this CollectionComplete.

        Various timeline dates  # noqa: E501

        :param timeline: The timeline of this CollectionComplete.  # noqa: E501
        :type: Timeline
        """
        if self._configuration.client_side_validation and timeline is None:
            raise ValueError("Invalid value for `timeline`, must not be `None`")  # noqa: E501

        self._timeline = timeline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectionComplete, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionComplete):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CollectionComplete):
            return True

        return self.to_dict() != other.to_dict()
