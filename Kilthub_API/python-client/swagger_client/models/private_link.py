# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PrivateLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_active': 'bool',
        'expires_date': 'str',
        'html_location': 'str'
    }

    attribute_map = {
        'id': 'id',
        'is_active': 'is_active',
        'expires_date': 'expires_date',
        'html_location': 'html_location'
    }

    def __init__(self, id=None, is_active=None, expires_date=None, html_location=None, _configuration=None):  # noqa: E501
        """PrivateLink - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._is_active = None
        self._expires_date = None
        self._html_location = None
        self.discriminator = None

        self.id = id
        self.is_active = is_active
        self.expires_date = expires_date
        self.html_location = html_location

    @property
    def id(self):
        """Gets the id of this PrivateLink.  # noqa: E501

        Private link id  # noqa: E501

        :return: The id of this PrivateLink.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrivateLink.

        Private link id  # noqa: E501

        :param id: The id of this PrivateLink.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this PrivateLink.  # noqa: E501

        True if private link is active  # noqa: E501

        :return: The is_active of this PrivateLink.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PrivateLink.

        True if private link is active  # noqa: E501

        :param is_active: The is_active of this PrivateLink.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def expires_date(self):
        """Gets the expires_date of this PrivateLink.  # noqa: E501

        Date when link will expire  # noqa: E501

        :return: The expires_date of this PrivateLink.  # noqa: E501
        :rtype: str
        """
        return self._expires_date

    @expires_date.setter
    def expires_date(self, expires_date):
        """Sets the expires_date of this PrivateLink.

        Date when link will expire  # noqa: E501

        :param expires_date: The expires_date of this PrivateLink.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and expires_date is None:
            raise ValueError("Invalid value for `expires_date`, must not be `None`")  # noqa: E501

        self._expires_date = expires_date

    @property
    def html_location(self):
        """Gets the html_location of this PrivateLink.  # noqa: E501

        HTML url for private link  # noqa: E501

        :return: The html_location of this PrivateLink.  # noqa: E501
        :rtype: str
        """
        return self._html_location

    @html_location.setter
    def html_location(self, html_location):
        """Sets the html_location of this PrivateLink.

        HTML url for private link  # noqa: E501

        :param html_location: The html_location of this PrivateLink.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and html_location is None:
            raise ValueError("Invalid value for `html_location`, must not be `None`")  # noqa: E501

        self._html_location = html_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrivateLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivateLink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PrivateLink):
            return True

        return self.to_dict() != other.to_dict()
