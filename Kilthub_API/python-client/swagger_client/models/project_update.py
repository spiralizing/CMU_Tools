# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ProjectUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'funding': 'str',
        'funding_list': 'list[FundingCreate]',
        'custom_fields': 'object',
        'custom_fields_list': 'list[CustomArticleFieldAdd]'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'funding': 'funding',
        'funding_list': 'funding_list',
        'custom_fields': 'custom_fields',
        'custom_fields_list': 'custom_fields_list'
    }

    def __init__(self, title=None, description=None, funding=None, funding_list=None, custom_fields=None, custom_fields_list=None, _configuration=None):  # noqa: E501
        """ProjectUpdate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._title = None
        self._description = None
        self._funding = None
        self._funding_list = None
        self._custom_fields = None
        self._custom_fields_list = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if funding is not None:
            self.funding = funding
        if funding_list is not None:
            self.funding_list = funding_list
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if custom_fields_list is not None:
            self.custom_fields_list = custom_fields_list

    @property
    def title(self):
        """Gets the title of this ProjectUpdate.  # noqa: E501

        The title for this project - mandatory. 3 - 1000 characters.  # noqa: E501

        :return: The title of this ProjectUpdate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProjectUpdate.

        The title for this project - mandatory. 3 - 1000 characters.  # noqa: E501

        :param title: The title of this ProjectUpdate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                title is not None and len(title) > 1000):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `1000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                title is not None and len(title) < 3):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `3`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this ProjectUpdate.  # noqa: E501

        Project description  # noqa: E501

        :return: The description of this ProjectUpdate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectUpdate.

        Project description  # noqa: E501

        :param description: The description of this ProjectUpdate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 10000):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `10000`")  # noqa: E501

        self._description = description

    @property
    def funding(self):
        """Gets the funding of this ProjectUpdate.  # noqa: E501

        Grant number or organization(s) that funded this project. Up to 2000 characters permitted.  # noqa: E501

        :return: The funding of this ProjectUpdate.  # noqa: E501
        :rtype: str
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this ProjectUpdate.

        Grant number or organization(s) that funded this project. Up to 2000 characters permitted.  # noqa: E501

        :param funding: The funding of this ProjectUpdate.  # noqa: E501
        :type: str
        """

        self._funding = funding

    @property
    def funding_list(self):
        """Gets the funding_list of this ProjectUpdate.  # noqa: E501

        Funding creation / update items  # noqa: E501

        :return: The funding_list of this ProjectUpdate.  # noqa: E501
        :rtype: list[FundingCreate]
        """
        return self._funding_list

    @funding_list.setter
    def funding_list(self, funding_list):
        """Sets the funding_list of this ProjectUpdate.

        Funding creation / update items  # noqa: E501

        :param funding_list: The funding_list of this ProjectUpdate.  # noqa: E501
        :type: list[FundingCreate]
        """

        self._funding_list = funding_list

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ProjectUpdate.  # noqa: E501

        List of key, values pairs to be associated with the project  # noqa: E501

        :return: The custom_fields of this ProjectUpdate.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ProjectUpdate.

        List of key, values pairs to be associated with the project  # noqa: E501

        :param custom_fields: The custom_fields of this ProjectUpdate.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    @property
    def custom_fields_list(self):
        """Gets the custom_fields_list of this ProjectUpdate.  # noqa: E501

        List of custom fields values, supersedes custom_fields parameter  # noqa: E501

        :return: The custom_fields_list of this ProjectUpdate.  # noqa: E501
        :rtype: list[CustomArticleFieldAdd]
        """
        return self._custom_fields_list

    @custom_fields_list.setter
    def custom_fields_list(self, custom_fields_list):
        """Sets the custom_fields_list of this ProjectUpdate.

        List of custom fields values, supersedes custom_fields parameter  # noqa: E501

        :param custom_fields_list: The custom_fields_list of this ProjectUpdate.  # noqa: E501
        :type: list[CustomArticleFieldAdd]
        """

        self._custom_fields_list = custom_fields_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectUpdate):
            return True

        return self.to_dict() != other.to_dict()
