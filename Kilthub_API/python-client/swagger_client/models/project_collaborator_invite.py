# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ProjectCollaboratorInvite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role_name': 'str',
        'user_id': 'int',
        'email': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'role_name': 'role_name',
        'user_id': 'user_id',
        'email': 'email',
        'comment': 'comment'
    }

    def __init__(self, role_name=None, user_id=None, email=None, comment=None, _configuration=None):  # noqa: E501
        """ProjectCollaboratorInvite - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._role_name = None
        self._user_id = None
        self._email = None
        self._comment = None
        self.discriminator = None

        self.role_name = role_name
        if user_id is not None:
            self.user_id = user_id
        if email is not None:
            self.email = email
        if comment is not None:
            self.comment = comment

    @property
    def role_name(self):
        """Gets the role_name of this ProjectCollaboratorInvite.  # noqa: E501

        Role of the the collaborator inside the project  # noqa: E501

        :return: The role_name of this ProjectCollaboratorInvite.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this ProjectCollaboratorInvite.

        Role of the the collaborator inside the project  # noqa: E501

        :param role_name: The role_name of this ProjectCollaboratorInvite.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and role_name is None:
            raise ValueError("Invalid value for `role_name`, must not be `None`")  # noqa: E501
        allowed_values = ["viewer", "collaborator"]  # noqa: E501
        if (self._configuration.client_side_validation and
                role_name not in allowed_values):
            raise ValueError(
                "Invalid value for `role_name` ({0}), must be one of {1}"  # noqa: E501
                .format(role_name, allowed_values)
            )

        self._role_name = role_name

    @property
    def user_id(self):
        """Gets the user_id of this ProjectCollaboratorInvite.  # noqa: E501

        User id of the collaborator  # noqa: E501

        :return: The user_id of this ProjectCollaboratorInvite.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ProjectCollaboratorInvite.

        User id of the collaborator  # noqa: E501

        :param user_id: The user_id of this ProjectCollaboratorInvite.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def email(self):
        """Gets the email of this ProjectCollaboratorInvite.  # noqa: E501

        Collaborator email  # noqa: E501

        :return: The email of this ProjectCollaboratorInvite.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ProjectCollaboratorInvite.

        Collaborator email  # noqa: E501

        :param email: The email of this ProjectCollaboratorInvite.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def comment(self):
        """Gets the comment of this ProjectCollaboratorInvite.  # noqa: E501

        Text sent when inviting the user to the project  # noqa: E501

        :return: The comment of this ProjectCollaboratorInvite.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ProjectCollaboratorInvite.

        Text sent when inviting the user to the project  # noqa: E501

        :param comment: The comment of this ProjectCollaboratorInvite.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectCollaboratorInvite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectCollaboratorInvite):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectCollaboratorInvite):
            return True

        return self.to_dict() != other.to_dict()
