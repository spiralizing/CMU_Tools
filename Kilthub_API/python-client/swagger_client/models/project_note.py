# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ProjectNote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'int',
        'abstract': 'str',
        'user_name': 'str',
        'created_date': 'str',
        'modified_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'user_id',
        'abstract': 'abstract',
        'user_name': 'user_name',
        'created_date': 'created_date',
        'modified_date': 'modified_date'
    }

    def __init__(self, id=None, user_id=None, abstract=None, user_name=None, created_date=None, modified_date=None, _configuration=None):  # noqa: E501
        """ProjectNote - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user_id = None
        self._abstract = None
        self._user_name = None
        self._created_date = None
        self._modified_date = None
        self.discriminator = None

        self.id = id
        self.user_id = user_id
        self.abstract = abstract
        self.user_name = user_name
        self.created_date = created_date
        self.modified_date = modified_date

    @property
    def id(self):
        """Gets the id of this ProjectNote.  # noqa: E501

        Project note id  # noqa: E501

        :return: The id of this ProjectNote.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectNote.

        Project note id  # noqa: E501

        :param id: The id of this ProjectNote.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this ProjectNote.  # noqa: E501

        User who wrote the note  # noqa: E501

        :return: The user_id of this ProjectNote.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ProjectNote.

        User who wrote the note  # noqa: E501

        :param user_id: The user_id of this ProjectNote.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def abstract(self):
        """Gets the abstract of this ProjectNote.  # noqa: E501

        Note Abstract - short/truncated content  # noqa: E501

        :return: The abstract of this ProjectNote.  # noqa: E501
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this ProjectNote.

        Note Abstract - short/truncated content  # noqa: E501

        :param abstract: The abstract of this ProjectNote.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and abstract is None:
            raise ValueError("Invalid value for `abstract`, must not be `None`")  # noqa: E501

        self._abstract = abstract

    @property
    def user_name(self):
        """Gets the user_name of this ProjectNote.  # noqa: E501

        Username of the one who wrote the note  # noqa: E501

        :return: The user_name of this ProjectNote.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ProjectNote.

        Username of the one who wrote the note  # noqa: E501

        :param user_name: The user_name of this ProjectNote.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def created_date(self):
        """Gets the created_date of this ProjectNote.  # noqa: E501

        Date when note was created  # noqa: E501

        :return: The created_date of this ProjectNote.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProjectNote.

        Date when note was created  # noqa: E501

        :param created_date: The created_date of this ProjectNote.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def modified_date(self):
        """Gets the modified_date of this ProjectNote.  # noqa: E501

        Date when note was last modified  # noqa: E501

        :return: The modified_date of this ProjectNote.  # noqa: E501
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this ProjectNote.

        Date when note was last modified  # noqa: E501

        :param modified_date: The modified_date of this ProjectNote.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and modified_date is None:
            raise ValueError("Invalid value for `modified_date`, must not be `None`")  # noqa: E501

        self._modified_date = modified_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectNote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectNote):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectNote):
            return True

        return self.to_dict() != other.to_dict()
