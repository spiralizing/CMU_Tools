# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PrivateAuthorsSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search_for': 'str',
        'page': 'int',
        'page_size': 'int',
        'limit': 'int',
        'offset': 'int',
        'order': 'str',
        'order_direction': 'str',
        'institution_id': 'int',
        'orcid': 'str',
        'group_id': 'int',
        'is_active': 'bool',
        'is_public': 'bool'
    }

    attribute_map = {
        'search_for': 'search_for',
        'page': 'page',
        'page_size': 'page_size',
        'limit': 'limit',
        'offset': 'offset',
        'order': 'order',
        'order_direction': 'order_direction',
        'institution_id': 'institution_id',
        'orcid': 'orcid',
        'group_id': 'group_id',
        'is_active': 'is_active',
        'is_public': 'is_public'
    }

    def __init__(self, search_for=None, page=None, page_size=10, limit=None, offset=None, order='published_date', order_direction='desc', institution_id=None, orcid=None, group_id=None, is_active=None, is_public=None, _configuration=None):  # noqa: E501
        """PrivateAuthorsSearch - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._search_for = None
        self._page = None
        self._page_size = None
        self._limit = None
        self._offset = None
        self._order = None
        self._order_direction = None
        self._institution_id = None
        self._orcid = None
        self._group_id = None
        self._is_active = None
        self._is_public = None
        self.discriminator = None

        if search_for is not None:
            self.search_for = search_for
        if page is not None:
            self.page = page
        if page_size is not None:
            self.page_size = page_size
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if order is not None:
            self.order = order
        if order_direction is not None:
            self.order_direction = order_direction
        if institution_id is not None:
            self.institution_id = institution_id
        if orcid is not None:
            self.orcid = orcid
        if group_id is not None:
            self.group_id = group_id
        if is_active is not None:
            self.is_active = is_active
        if is_public is not None:
            self.is_public = is_public

    @property
    def search_for(self):
        """Gets the search_for of this PrivateAuthorsSearch.  # noqa: E501

        Search term  # noqa: E501

        :return: The search_for of this PrivateAuthorsSearch.  # noqa: E501
        :rtype: str
        """
        return self._search_for

    @search_for.setter
    def search_for(self, search_for):
        """Sets the search_for of this PrivateAuthorsSearch.

        Search term  # noqa: E501

        :param search_for: The search_for of this PrivateAuthorsSearch.  # noqa: E501
        :type: str
        """

        self._search_for = search_for

    @property
    def page(self):
        """Gets the page of this PrivateAuthorsSearch.  # noqa: E501

        Page number. Used for pagination with page_size  # noqa: E501

        :return: The page of this PrivateAuthorsSearch.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PrivateAuthorsSearch.

        Page number. Used for pagination with page_size  # noqa: E501

        :param page: The page of this PrivateAuthorsSearch.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                page is not None and page > 5000):  # noqa: E501
            raise ValueError("Invalid value for `page`, must be a value less than or equal to `5000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                page is not None and page < 1):  # noqa: E501
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this PrivateAuthorsSearch.  # noqa: E501

        The number of results included on a page. Used for pagination with page  # noqa: E501

        :return: The page_size of this PrivateAuthorsSearch.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this PrivateAuthorsSearch.

        The number of results included on a page. Used for pagination with page  # noqa: E501

        :param page_size: The page_size of this PrivateAuthorsSearch.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                page_size is not None and page_size > 1000):  # noqa: E501
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                page_size is not None and page_size < 1):  # noqa: E501
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page_size = page_size

    @property
    def limit(self):
        """Gets the limit of this PrivateAuthorsSearch.  # noqa: E501

        Number of results included on a page. Used for pagination with query  # noqa: E501

        :return: The limit of this PrivateAuthorsSearch.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PrivateAuthorsSearch.

        Number of results included on a page. Used for pagination with query  # noqa: E501

        :param limit: The limit of this PrivateAuthorsSearch.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                limit is not None and limit > 1000):  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                limit is not None and limit < 1):  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this PrivateAuthorsSearch.  # noqa: E501

        Where to start the listing(the offset of the first result). Used for pagination with limit  # noqa: E501

        :return: The offset of this PrivateAuthorsSearch.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PrivateAuthorsSearch.

        Where to start the listing(the offset of the first result). Used for pagination with limit  # noqa: E501

        :param offset: The offset of this PrivateAuthorsSearch.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                offset is not None and offset > 5000):  # noqa: E501
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `5000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                offset is not None and offset < 0):  # noqa: E501
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0`")  # noqa: E501

        self._offset = offset

    @property
    def order(self):
        """Gets the order of this PrivateAuthorsSearch.  # noqa: E501

        The field by which to order. Default varies by endpoint/resource.  # noqa: E501

        :return: The order of this PrivateAuthorsSearch.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PrivateAuthorsSearch.

        The field by which to order. Default varies by endpoint/resource.  # noqa: E501

        :param order: The order of this PrivateAuthorsSearch.  # noqa: E501
        :type: str
        """
        allowed_values = ["published_date", "modified_date", "views", "shares", "downloads", "cites"]  # noqa: E501
        if (self._configuration.client_side_validation and
                order not in allowed_values):
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"  # noqa: E501
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def order_direction(self):
        """Gets the order_direction of this PrivateAuthorsSearch.  # noqa: E501

        Direction of ordering  # noqa: E501

        :return: The order_direction of this PrivateAuthorsSearch.  # noqa: E501
        :rtype: str
        """
        return self._order_direction

    @order_direction.setter
    def order_direction(self, order_direction):
        """Sets the order_direction of this PrivateAuthorsSearch.

        Direction of ordering  # noqa: E501

        :param order_direction: The order_direction of this PrivateAuthorsSearch.  # noqa: E501
        :type: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if (self._configuration.client_side_validation and
                order_direction not in allowed_values):
            raise ValueError(
                "Invalid value for `order_direction` ({0}), must be one of {1}"  # noqa: E501
                .format(order_direction, allowed_values)
            )

        self._order_direction = order_direction

    @property
    def institution_id(self):
        """Gets the institution_id of this PrivateAuthorsSearch.  # noqa: E501

        Return only authors associated to this institution  # noqa: E501

        :return: The institution_id of this PrivateAuthorsSearch.  # noqa: E501
        :rtype: int
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this PrivateAuthorsSearch.

        Return only authors associated to this institution  # noqa: E501

        :param institution_id: The institution_id of this PrivateAuthorsSearch.  # noqa: E501
        :type: int
        """

        self._institution_id = institution_id

    @property
    def orcid(self):
        """Gets the orcid of this PrivateAuthorsSearch.  # noqa: E501

        Orcid of author  # noqa: E501

        :return: The orcid of this PrivateAuthorsSearch.  # noqa: E501
        :rtype: str
        """
        return self._orcid

    @orcid.setter
    def orcid(self, orcid):
        """Sets the orcid of this PrivateAuthorsSearch.

        Orcid of author  # noqa: E501

        :param orcid: The orcid of this PrivateAuthorsSearch.  # noqa: E501
        :type: str
        """

        self._orcid = orcid

    @property
    def group_id(self):
        """Gets the group_id of this PrivateAuthorsSearch.  # noqa: E501

        Return only authors in this group or subgroups of the group  # noqa: E501

        :return: The group_id of this PrivateAuthorsSearch.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this PrivateAuthorsSearch.

        Return only authors in this group or subgroups of the group  # noqa: E501

        :param group_id: The group_id of this PrivateAuthorsSearch.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def is_active(self):
        """Gets the is_active of this PrivateAuthorsSearch.  # noqa: E501

        Return only active authors if True  # noqa: E501

        :return: The is_active of this PrivateAuthorsSearch.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PrivateAuthorsSearch.

        Return only active authors if True  # noqa: E501

        :param is_active: The is_active of this PrivateAuthorsSearch.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_public(self):
        """Gets the is_public of this PrivateAuthorsSearch.  # noqa: E501

        Return only authors that have published items if True  # noqa: E501

        :return: The is_public of this PrivateAuthorsSearch.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this PrivateAuthorsSearch.

        Return only authors that have published items if True  # noqa: E501

        :param is_public: The is_public of this PrivateAuthorsSearch.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrivateAuthorsSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivateAuthorsSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PrivateAuthorsSearch):
            return True

        return self.to_dict() != other.to_dict()
