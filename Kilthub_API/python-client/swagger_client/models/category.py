# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Category(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent_id': 'int',
        'id': 'int',
        'title': 'str',
        'path': 'str',
        'source_id': 'str',
        'taxonomy_id': 'int'
    }

    attribute_map = {
        'parent_id': 'parent_id',
        'id': 'id',
        'title': 'title',
        'path': 'path',
        'source_id': 'source_id',
        'taxonomy_id': 'taxonomy_id'
    }

    def __init__(self, parent_id=None, id=None, title=None, path=None, source_id=None, taxonomy_id=None, _configuration=None):  # noqa: E501
        """Category - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._parent_id = None
        self._id = None
        self._title = None
        self._path = None
        self._source_id = None
        self._taxonomy_id = None
        self.discriminator = None

        self.parent_id = parent_id
        self.id = id
        self.title = title
        self.path = path
        self.source_id = source_id
        self.taxonomy_id = taxonomy_id

    @property
    def parent_id(self):
        """Gets the parent_id of this Category.  # noqa: E501

        Parent category  # noqa: E501

        :return: The parent_id of this Category.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Category.

        Parent category  # noqa: E501

        :param parent_id: The parent_id of this Category.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")  # noqa: E501

        self._parent_id = parent_id

    @property
    def id(self):
        """Gets the id of this Category.  # noqa: E501

        Category id  # noqa: E501

        :return: The id of this Category.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Category.

        Category id  # noqa: E501

        :param id: The id of this Category.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this Category.  # noqa: E501

        Category title  # noqa: E501

        :return: The title of this Category.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Category.

        Category title  # noqa: E501

        :param title: The title of this Category.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def path(self):
        """Gets the path of this Category.  # noqa: E501

        Path to all ancestor ids  # noqa: E501

        :return: The path of this Category.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Category.

        Path to all ancestor ids  # noqa: E501

        :param path: The path of this Category.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def source_id(self):
        """Gets the source_id of this Category.  # noqa: E501

        ID in original standard taxonomy  # noqa: E501

        :return: The source_id of this Category.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Category.

        ID in original standard taxonomy  # noqa: E501

        :param source_id: The source_id of this Category.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501

        self._source_id = source_id

    @property
    def taxonomy_id(self):
        """Gets the taxonomy_id of this Category.  # noqa: E501

        Internal id of taxonomy the category is part of  # noqa: E501

        :return: The taxonomy_id of this Category.  # noqa: E501
        :rtype: int
        """
        return self._taxonomy_id

    @taxonomy_id.setter
    def taxonomy_id(self, taxonomy_id):
        """Sets the taxonomy_id of this Category.

        Internal id of taxonomy the category is part of  # noqa: E501

        :param taxonomy_id: The taxonomy_id of this Category.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and taxonomy_id is None:
            raise ValueError("Invalid value for `taxonomy_id`, must not be `None`")  # noqa: E501

        self._taxonomy_id = taxonomy_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Category, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Category):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Category):
            return True

        return self.to_dict() != other.to_dict()
