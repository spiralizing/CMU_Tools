# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GroupEmbargoOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'str',
        'ip_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'ip_name': 'ip_name'
    }

    def __init__(self, id=None, type=None, ip_name=None, _configuration=None):  # noqa: E501
        """GroupEmbargoOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._ip_name = None
        self.discriminator = None

        self.id = id
        self.type = type
        self.ip_name = ip_name

    @property
    def id(self):
        """Gets the id of this GroupEmbargoOptions.  # noqa: E501

        Embargo option id  # noqa: E501

        :return: The id of this GroupEmbargoOptions.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupEmbargoOptions.

        Embargo option id  # noqa: E501

        :param id: The id of this GroupEmbargoOptions.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this GroupEmbargoOptions.  # noqa: E501

        Embargo permission type  # noqa: E501

        :return: The type of this GroupEmbargoOptions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GroupEmbargoOptions.

        Embargo permission type  # noqa: E501

        :param type: The type of this GroupEmbargoOptions.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["logged_in", "ip_range", "administrator"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def ip_name(self):
        """Gets the ip_name of this GroupEmbargoOptions.  # noqa: E501

        IP range name; value appears if type is ip_range  # noqa: E501

        :return: The ip_name of this GroupEmbargoOptions.  # noqa: E501
        :rtype: str
        """
        return self._ip_name

    @ip_name.setter
    def ip_name(self, ip_name):
        """Sets the ip_name of this GroupEmbargoOptions.

        IP range name; value appears if type is ip_range  # noqa: E501

        :param ip_name: The ip_name of this GroupEmbargoOptions.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ip_name is None:
            raise ValueError("Invalid value for `ip_name`, must not be `None`")  # noqa: E501

        self._ip_name = ip_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupEmbargoOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupEmbargoOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupEmbargoOptions):
            return True

        return self.to_dict() != other.to_dict()
