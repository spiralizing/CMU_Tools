# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ArticleComplete(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'figshare_url': 'str',
        'download_disabled': 'bool',
        'files': 'list[PublicFile]',
        'authors': 'list[Author]',
        'custom_fields': 'list[CustomArticleField]',
        'embargo_options': 'list[GroupEmbargoOptions]'
    }

    attribute_map = {
        'figshare_url': 'figshare_url',
        'download_disabled': 'download_disabled',
        'files': 'files',
        'authors': 'authors',
        'custom_fields': 'custom_fields',
        'embargo_options': 'embargo_options'
    }

    def __init__(self, figshare_url=None, download_disabled=None, files=None, authors=None, custom_fields=None, embargo_options=None, _configuration=None):  # noqa: E501
        """ArticleComplete - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._figshare_url = None
        self._download_disabled = None
        self._files = None
        self._authors = None
        self._custom_fields = None
        self._embargo_options = None
        self.discriminator = None

        self.figshare_url = figshare_url
        self.download_disabled = download_disabled
        self.files = files
        self.authors = authors
        self.custom_fields = custom_fields
        self.embargo_options = embargo_options

    @property
    def figshare_url(self):
        """Gets the figshare_url of this ArticleComplete.  # noqa: E501

        Article public url  # noqa: E501

        :return: The figshare_url of this ArticleComplete.  # noqa: E501
        :rtype: str
        """
        return self._figshare_url

    @figshare_url.setter
    def figshare_url(self, figshare_url):
        """Sets the figshare_url of this ArticleComplete.

        Article public url  # noqa: E501

        :param figshare_url: The figshare_url of this ArticleComplete.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and figshare_url is None:
            raise ValueError("Invalid value for `figshare_url`, must not be `None`")  # noqa: E501

        self._figshare_url = figshare_url

    @property
    def download_disabled(self):
        """Gets the download_disabled of this ArticleComplete.  # noqa: E501

        If true, downloading of files for this article is disabled  # noqa: E501

        :return: The download_disabled of this ArticleComplete.  # noqa: E501
        :rtype: bool
        """
        return self._download_disabled

    @download_disabled.setter
    def download_disabled(self, download_disabled):
        """Sets the download_disabled of this ArticleComplete.

        If true, downloading of files for this article is disabled  # noqa: E501

        :param download_disabled: The download_disabled of this ArticleComplete.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and download_disabled is None:
            raise ValueError("Invalid value for `download_disabled`, must not be `None`")  # noqa: E501

        self._download_disabled = download_disabled

    @property
    def files(self):
        """Gets the files of this ArticleComplete.  # noqa: E501

        List of article files  # noqa: E501

        :return: The files of this ArticleComplete.  # noqa: E501
        :rtype: list[PublicFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ArticleComplete.

        List of article files  # noqa: E501

        :param files: The files of this ArticleComplete.  # noqa: E501
        :type: list[PublicFile]
        """
        if self._configuration.client_side_validation and files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

    @property
    def authors(self):
        """Gets the authors of this ArticleComplete.  # noqa: E501

        List of article authors  # noqa: E501

        :return: The authors of this ArticleComplete.  # noqa: E501
        :rtype: list[Author]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this ArticleComplete.

        List of article authors  # noqa: E501

        :param authors: The authors of this ArticleComplete.  # noqa: E501
        :type: list[Author]
        """
        if self._configuration.client_side_validation and authors is None:
            raise ValueError("Invalid value for `authors`, must not be `None`")  # noqa: E501

        self._authors = authors

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ArticleComplete.  # noqa: E501

        List of custom fields values  # noqa: E501

        :return: The custom_fields of this ArticleComplete.  # noqa: E501
        :rtype: list[CustomArticleField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ArticleComplete.

        List of custom fields values  # noqa: E501

        :param custom_fields: The custom_fields of this ArticleComplete.  # noqa: E501
        :type: list[CustomArticleField]
        """
        if self._configuration.client_side_validation and custom_fields is None:
            raise ValueError("Invalid value for `custom_fields`, must not be `None`")  # noqa: E501

        self._custom_fields = custom_fields

    @property
    def embargo_options(self):
        """Gets the embargo_options of this ArticleComplete.  # noqa: E501

        List of embargo options  # noqa: E501

        :return: The embargo_options of this ArticleComplete.  # noqa: E501
        :rtype: list[GroupEmbargoOptions]
        """
        return self._embargo_options

    @embargo_options.setter
    def embargo_options(self, embargo_options):
        """Sets the embargo_options of this ArticleComplete.

        List of embargo options  # noqa: E501

        :param embargo_options: The embargo_options of this ArticleComplete.  # noqa: E501
        :type: list[GroupEmbargoOptions]
        """
        if self._configuration.client_side_validation and embargo_options is None:
            raise ValueError("Invalid value for `embargo_options`, must not be `None`")  # noqa: E501

        self._embargo_options = embargo_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArticleComplete, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArticleComplete):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ArticleComplete):
            return True

        return self.to_dict() != other.to_dict()
