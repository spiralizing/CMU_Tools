# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ArticlesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_article_report(self, **kwargs):  # noqa: E501
        """Account Article Report  # noqa: E501

        Return status on all reports generated for the account from the oauth credentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_article_report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A group ID to filter by
        :return: list[AccountReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_article_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_article_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_article_report_with_http_info(self, **kwargs):  # noqa: E501
        """Account Article Report  # noqa: E501

        Return status on all reports generated for the account from the oauth credentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_article_report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A group ID to filter by
        :return: list[AccountReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_article_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccountReport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_article_report_generate(self, **kwargs):  # noqa: E501
        """Initiate a new Report  # noqa: E501

        Initiate a new Article Report for this Account. There is a limit of 1 report per day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_article_report_generate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_article_report_generate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_article_report_generate_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_article_report_generate_with_http_info(self, **kwargs):  # noqa: E501
        """Initiate a new Report  # noqa: E501

        Initiate a new Article Report for this Account. There is a limit of 1 report per day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_article_report_generate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_article_report_generate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def article_details(self, article_id, **kwargs):  # noqa: E501
        """View article details  # noqa: E501

        View an article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_details(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :return: ArticleComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.article_details_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.article_details_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def article_details_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """View article details  # noqa: E501

        View an article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_details_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :return: ArticleComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `article_details`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `article_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/articles/{article_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArticleComplete',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def article_file_details(self, article_id, file_id, **kwargs):  # noqa: E501
        """Article file details  # noqa: E501

        File by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_file_details(article_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :param int file_id: File Unique identifier (required)
        :return: PublicFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.article_file_details_with_http_info(article_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.article_file_details_with_http_info(article_id, file_id, **kwargs)  # noqa: E501
            return data

    def article_file_details_with_http_info(self, article_id, file_id, **kwargs):  # noqa: E501
        """Article file details  # noqa: E501

        File by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_file_details_with_http_info(article_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :param int file_id: File Unique identifier (required)
        :return: PublicFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_file_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `article_file_details`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `article_file_details`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `article_file_details`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('file_id' in params and params['file_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `file_id` when calling `article_file_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/articles/{article_id}/files/{file_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def article_files(self, article_id, **kwargs):  # noqa: E501
        """List article files  # noqa: E501

        Files list for article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_files(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :return: list[PublicFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.article_files_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.article_files_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def article_files_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """List article files  # noqa: E501

        Files list for article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_files_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :return: list[PublicFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `article_files`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `article_files`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/articles/{article_id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PublicFile]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def article_version_confidentiality(self, article_id, v_number, **kwargs):  # noqa: E501
        """Public Article Confidentiality for article version  # noqa: E501

        Confidentiality for article version. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_version_confidentiality(article_id, v_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :param int v_number: Version Number (required)
        :return: ArticleConfidentiality
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.article_version_confidentiality_with_http_info(article_id, v_number, **kwargs)  # noqa: E501
        else:
            (data) = self.article_version_confidentiality_with_http_info(article_id, v_number, **kwargs)  # noqa: E501
            return data

    def article_version_confidentiality_with_http_info(self, article_id, v_number, **kwargs):  # noqa: E501
        """Public Article Confidentiality for article version  # noqa: E501

        Confidentiality for article version. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_version_confidentiality_with_http_info(article_id, v_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :param int v_number: Version Number (required)
        :return: ArticleConfidentiality
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'v_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_version_confidentiality" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `article_version_confidentiality`")  # noqa: E501
        # verify the required parameter 'v_number' is set
        if self.api_client.client_side_validation and ('v_number' not in params or
                                                       params['v_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `v_number` when calling `article_version_confidentiality`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `article_version_confidentiality`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('v_number' in params and params['v_number'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `v_number` when calling `article_version_confidentiality`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'v_number' in params:
            path_params['v_number'] = params['v_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/articles/{article_id}/versions/{v_number}/confidentiality', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArticleConfidentiality',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def article_version_details(self, article_id, v_number, **kwargs):  # noqa: E501
        """Article details for version  # noqa: E501

        Article with specified version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_version_details(article_id, v_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :param int v_number: Article Version Number (required)
        :return: ArticleComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.article_version_details_with_http_info(article_id, v_number, **kwargs)  # noqa: E501
        else:
            (data) = self.article_version_details_with_http_info(article_id, v_number, **kwargs)  # noqa: E501
            return data

    def article_version_details_with_http_info(self, article_id, v_number, **kwargs):  # noqa: E501
        """Article details for version  # noqa: E501

        Article with specified version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_version_details_with_http_info(article_id, v_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :param int v_number: Article Version Number (required)
        :return: ArticleComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'v_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `article_version_details`")  # noqa: E501
        # verify the required parameter 'v_number' is set
        if self.api_client.client_side_validation and ('v_number' not in params or
                                                       params['v_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `v_number` when calling `article_version_details`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `article_version_details`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('v_number' in params and params['v_number'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `v_number` when calling `article_version_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'v_number' in params:
            path_params['v_number'] = params['v_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/articles/{article_id}/versions/{v_number}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArticleComplete',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def article_version_embargo(self, article_id, v_number, **kwargs):  # noqa: E501
        """Public Article Embargo for article version  # noqa: E501

        Embargo for article version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_version_embargo(article_id, v_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :param int v_number: Version Number (required)
        :return: ArticleEmbargo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.article_version_embargo_with_http_info(article_id, v_number, **kwargs)  # noqa: E501
        else:
            (data) = self.article_version_embargo_with_http_info(article_id, v_number, **kwargs)  # noqa: E501
            return data

    def article_version_embargo_with_http_info(self, article_id, v_number, **kwargs):  # noqa: E501
        """Public Article Embargo for article version  # noqa: E501

        Embargo for article version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_version_embargo_with_http_info(article_id, v_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :param int v_number: Version Number (required)
        :return: ArticleEmbargo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'v_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_version_embargo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `article_version_embargo`")  # noqa: E501
        # verify the required parameter 'v_number' is set
        if self.api_client.client_side_validation and ('v_number' not in params or
                                                       params['v_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `v_number` when calling `article_version_embargo`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `article_version_embargo`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('v_number' in params and params['v_number'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `v_number` when calling `article_version_embargo`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'v_number' in params:
            path_params['v_number'] = params['v_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/articles/{article_id}/versions/{v_number}/embargo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArticleEmbargo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def article_version_update(self, article_id, version_id, article, **kwargs):  # noqa: E501
        """Update article version  # noqa: E501

        Updating an article version by passing body parameters; request can also be made with the PATCH method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_version_update(article_id, version_id, article, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int version_id: Article version identifier (required)
        :param ArticleUpdate article: Article description (required)
        :return: LocationWarningsUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.article_version_update_with_http_info(article_id, version_id, article, **kwargs)  # noqa: E501
        else:
            (data) = self.article_version_update_with_http_info(article_id, version_id, article, **kwargs)  # noqa: E501
            return data

    def article_version_update_with_http_info(self, article_id, version_id, article, **kwargs):  # noqa: E501
        """Update article version  # noqa: E501

        Updating an article version by passing body parameters; request can also be made with the PATCH method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_version_update_with_http_info(article_id, version_id, article, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int version_id: Article version identifier (required)
        :param ArticleUpdate article: Article description (required)
        :return: LocationWarningsUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'version_id', 'article']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_version_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `article_version_update`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `article_version_update`")  # noqa: E501
        # verify the required parameter 'article' is set
        if self.api_client.client_side_validation and ('article' not in params or
                                                       params['article'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article` when calling `article_version_update`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `article_version_update`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('version_id' in params and params['version_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `version_id` when calling `article_version_update`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'version_id' in params:
            path_params['version_id'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'article' in params:
            body_params = params['article']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/versions/{version_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocationWarningsUpdate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def article_version_update_thumb(self, article_id, version_id, file_id, **kwargs):  # noqa: E501
        """Update article version thumbnail  # noqa: E501

        For a given public article version update the article thumbnail by choosing one of the associated files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_version_update_thumb(article_id, version_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int version_id: Article version identifier (required)
        :param FileId file_id: File ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.article_version_update_thumb_with_http_info(article_id, version_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.article_version_update_thumb_with_http_info(article_id, version_id, file_id, **kwargs)  # noqa: E501
            return data

    def article_version_update_thumb_with_http_info(self, article_id, version_id, file_id, **kwargs):  # noqa: E501
        """Update article version thumbnail  # noqa: E501

        For a given public article version update the article thumbnail by choosing one of the associated files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_version_update_thumb_with_http_info(article_id, version_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int version_id: Article version identifier (required)
        :param FileId file_id: File ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'version_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_version_update_thumb" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `article_version_update_thumb`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `article_version_update_thumb`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `article_version_update_thumb`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `article_version_update_thumb`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('version_id' in params and params['version_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `version_id` when calling `article_version_update_thumb`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'version_id' in params:
            path_params['version_id'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'file_id' in params:
            body_params = params['file_id']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/versions/{version_id}/update_thumb', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def article_versions(self, article_id, **kwargs):  # noqa: E501
        """List article versions  # noqa: E501

        List public article versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_versions(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :return: list[ArticleVersions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.article_versions_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.article_versions_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def article_versions_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """List article versions  # noqa: E501

        List public article versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.article_versions_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article Unique identifier (required)
        :return: list[ArticleVersions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `article_versions`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `article_versions`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/articles/{article_id}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ArticleVersions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def articles_list(self, **kwargs):  # noqa: E501
        """Public Articles  # noqa: E501

        Returns a list of public articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.articles_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param int institution: only return articles from this institution
        :param str published_since: Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param str modified_since: Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param int group: only return articles from this group
        :param str resource_doi: only return articles with this resource_doi
        :param int item_type: Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model
        :param str doi: only return articles with this doi
        :param str handle: only return articles with this handle
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.articles_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.articles_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def articles_list_with_http_info(self, **kwargs):  # noqa: E501
        """Public Articles  # noqa: E501

        Returns a list of public articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.articles_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param int institution: only return articles from this institution
        :param str published_since: Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param str modified_since: Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param int group: only return articles from this group
        :param str resource_doi: only return articles with this resource_doi
        :param int item_type: Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model
        :param str doi: only return articles with this doi
        :param str handle: only return articles with this handle
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_cursor', 'page', 'page_size', 'limit', 'offset', 'order', 'order_direction', 'institution', 'published_since', 'modified_since', 'group', 'resource_doi', 'item_type', 'doi', 'handle']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method articles_list" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('page' in params and params['page'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `articles_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `articles_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `articles_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `articles_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `articles_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))  # noqa: E501
        if 'institution' in params:
            query_params.append(('institution', params['institution']))  # noqa: E501
        if 'published_since' in params:
            query_params.append(('published_since', params['published_since']))  # noqa: E501
        if 'modified_since' in params:
            query_params.append(('modified_since', params['modified_since']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
        if 'resource_doi' in params:
            query_params.append(('resource_doi', params['resource_doi']))  # noqa: E501
        if 'item_type' in params:
            query_params.append(('item_type', params['item_type']))  # noqa: E501
        if 'doi' in params:
            query_params.append(('doi', params['doi']))  # noqa: E501
        if 'handle' in params:
            query_params.append(('handle', params['handle']))  # noqa: E501

        header_params = {}
        if 'x_cursor' in params:
            header_params['X-Cursor'] = params['x_cursor']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/articles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Article]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def articles_search(self, **kwargs):  # noqa: E501
        """Public Articles Search  # noqa: E501

        Returns a list of public articles, filtered by the search parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.articles_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param ArticleSearch search: Search Parameters
        :return: list[ArticleWithProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.articles_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.articles_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def articles_search_with_http_info(self, **kwargs):  # noqa: E501
        """Public Articles Search  # noqa: E501

        Returns a list of public articles, filtered by the search parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.articles_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param ArticleSearch search: Search Parameters
        :return: list[ArticleWithProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_cursor', 'search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method articles_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_cursor' in params:
            header_params['X-Cursor'] = params['x_cursor']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/articles/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ArticleWithProject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_author_delete(self, article_id, author_id, **kwargs):  # noqa: E501
        """Delete article author  # noqa: E501

        De-associate author from article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_author_delete(article_id, author_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int author_id: Article Author unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_author_delete_with_http_info(article_id, author_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_author_delete_with_http_info(article_id, author_id, **kwargs)  # noqa: E501
            return data

    def private_article_author_delete_with_http_info(self, article_id, author_id, **kwargs):  # noqa: E501
        """Delete article author  # noqa: E501

        De-associate author from article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_author_delete_with_http_info(article_id, author_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int author_id: Article Author unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'author_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_author_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_author_delete`")  # noqa: E501
        # verify the required parameter 'author_id' is set
        if self.api_client.client_side_validation and ('author_id' not in params or
                                                       params['author_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `author_id` when calling `private_article_author_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_author_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('author_id' in params and params['author_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `author_id` when calling `private_article_author_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'author_id' in params:
            path_params['author_id'] = params['author_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/authors/{author_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_authors_add(self, article_id, authors, **kwargs):  # noqa: E501
        """Add article authors  # noqa: E501

        Associate new authors with the article. This will add new authors to the list of already associated authors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_authors_add(article_id, authors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param AuthorsCreator authors: Authors description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_authors_add_with_http_info(article_id, authors, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_authors_add_with_http_info(article_id, authors, **kwargs)  # noqa: E501
            return data

    def private_article_authors_add_with_http_info(self, article_id, authors, **kwargs):  # noqa: E501
        """Add article authors  # noqa: E501

        Associate new authors with the article. This will add new authors to the list of already associated authors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_authors_add_with_http_info(article_id, authors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param AuthorsCreator authors: Authors description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'authors']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_authors_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_authors_add`")  # noqa: E501
        # verify the required parameter 'authors' is set
        if self.api_client.client_side_validation and ('authors' not in params or
                                                       params['authors'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authors` when calling `private_article_authors_add`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_authors_add`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authors' in params:
            body_params = params['authors']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/authors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_authors_list(self, article_id, **kwargs):  # noqa: E501
        """List article authors  # noqa: E501

        List article authors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_authors_list(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: list[Author]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_authors_list_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_authors_list_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_authors_list_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """List article authors  # noqa: E501

        List article authors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_authors_list_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: list[Author]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_authors_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_authors_list`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_authors_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/authors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Author]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_authors_replace(self, article_id, authors, **kwargs):  # noqa: E501
        """Replace article authors  # noqa: E501

        Associate new authors with the article. This will remove all already associated authors and add these new ones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_authors_replace(article_id, authors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param AuthorsCreator authors: Authors description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_authors_replace_with_http_info(article_id, authors, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_authors_replace_with_http_info(article_id, authors, **kwargs)  # noqa: E501
            return data

    def private_article_authors_replace_with_http_info(self, article_id, authors, **kwargs):  # noqa: E501
        """Replace article authors  # noqa: E501

        Associate new authors with the article. This will remove all already associated authors and add these new ones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_authors_replace_with_http_info(article_id, authors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param AuthorsCreator authors: Authors description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'authors']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_authors_replace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_authors_replace`")  # noqa: E501
        # verify the required parameter 'authors' is set
        if self.api_client.client_side_validation and ('authors' not in params or
                                                       params['authors'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authors` when calling `private_article_authors_replace`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_authors_replace`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authors' in params:
            body_params = params['authors']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/authors', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_categories_add(self, article_id, categories, **kwargs):  # noqa: E501
        """Add article categories  # noqa: E501

        Associate new categories with the article. This will add new categories to the list of already associated categories  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_categories_add(article_id, categories, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param CategoriesCreator categories: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_categories_add_with_http_info(article_id, categories, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_categories_add_with_http_info(article_id, categories, **kwargs)  # noqa: E501
            return data

    def private_article_categories_add_with_http_info(self, article_id, categories, **kwargs):  # noqa: E501
        """Add article categories  # noqa: E501

        Associate new categories with the article. This will add new categories to the list of already associated categories  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_categories_add_with_http_info(article_id, categories, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param CategoriesCreator categories: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'categories']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_categories_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_categories_add`")  # noqa: E501
        # verify the required parameter 'categories' is set
        if self.api_client.client_side_validation and ('categories' not in params or
                                                       params['categories'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `categories` when calling `private_article_categories_add`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_categories_add`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'categories' in params:
            body_params = params['categories']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/categories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_categories_list(self, article_id, **kwargs):  # noqa: E501
        """List article categories  # noqa: E501

        List article categories  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_categories_list(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_categories_list_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_categories_list_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_categories_list_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """List article categories  # noqa: E501

        List article categories  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_categories_list_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_categories_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_categories_list`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_categories_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Category]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_categories_replace(self, article_id, categories, **kwargs):  # noqa: E501
        """Replace article categories  # noqa: E501

        Associate new categories with the article. This will remove all already associated categories and add these new ones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_categories_replace(article_id, categories, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param CategoriesCreator categories: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_categories_replace_with_http_info(article_id, categories, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_categories_replace_with_http_info(article_id, categories, **kwargs)  # noqa: E501
            return data

    def private_article_categories_replace_with_http_info(self, article_id, categories, **kwargs):  # noqa: E501
        """Replace article categories  # noqa: E501

        Associate new categories with the article. This will remove all already associated categories and add these new ones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_categories_replace_with_http_info(article_id, categories, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param CategoriesCreator categories: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'categories']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_categories_replace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_categories_replace`")  # noqa: E501
        # verify the required parameter 'categories' is set
        if self.api_client.client_side_validation and ('categories' not in params or
                                                       params['categories'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `categories` when calling `private_article_categories_replace`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_categories_replace`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'categories' in params:
            body_params = params['categories']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/categories', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_category_delete(self, article_id, category_id, **kwargs):  # noqa: E501
        """Delete article category  # noqa: E501

        De-associate category from article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_category_delete(article_id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int category_id: Category unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_category_delete_with_http_info(article_id, category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_category_delete_with_http_info(article_id, category_id, **kwargs)  # noqa: E501
            return data

    def private_article_category_delete_with_http_info(self, article_id, category_id, **kwargs):  # noqa: E501
        """Delete article category  # noqa: E501

        De-associate category from article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_category_delete_with_http_info(article_id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int category_id: Category unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_category_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_category_delete`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if self.api_client.client_side_validation and ('category_id' not in params or
                                                       params['category_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `category_id` when calling `private_article_category_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_category_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('category_id' in params and params['category_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `category_id` when calling `private_article_category_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'category_id' in params:
            path_params['category_id'] = params['category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/categories/{category_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_confidentiality_delete(self, article_id, **kwargs):  # noqa: E501
        """Delete article confidentiality  # noqa: E501

        Delete confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_confidentiality_delete(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_confidentiality_delete_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_confidentiality_delete_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_confidentiality_delete_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """Delete article confidentiality  # noqa: E501

        Delete confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_confidentiality_delete_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_confidentiality_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_confidentiality_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_confidentiality_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/confidentiality', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_confidentiality_details(self, article_id, **kwargs):  # noqa: E501
        """Article confidentiality details  # noqa: E501

        View confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_confidentiality_details(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: ArticleConfidentiality
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_confidentiality_details_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_confidentiality_details_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_confidentiality_details_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """Article confidentiality details  # noqa: E501

        View confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_confidentiality_details_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: ArticleConfidentiality
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_confidentiality_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_confidentiality_details`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_confidentiality_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/confidentiality', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArticleConfidentiality',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_confidentiality_update(self, article_id, reason, **kwargs):  # noqa: E501
        """Update article confidentiality  # noqa: E501

        Update confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_confidentiality_update(article_id, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param ConfidentialityCreator reason: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_confidentiality_update_with_http_info(article_id, reason, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_confidentiality_update_with_http_info(article_id, reason, **kwargs)  # noqa: E501
            return data

    def private_article_confidentiality_update_with_http_info(self, article_id, reason, **kwargs):  # noqa: E501
        """Update article confidentiality  # noqa: E501

        Update confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_confidentiality_update_with_http_info(article_id, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param ConfidentialityCreator reason: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'reason']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_confidentiality_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_confidentiality_update`")  # noqa: E501
        # verify the required parameter 'reason' is set
        if self.api_client.client_side_validation and ('reason' not in params or
                                                       params['reason'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reason` when calling `private_article_confidentiality_update`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_confidentiality_update`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reason' in params:
            body_params = params['reason']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/confidentiality', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_create(self, article, **kwargs):  # noqa: E501
        """Create new Article  # noqa: E501

        Create a new Article by sending article information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_create(article, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArticleCreate article: Article description (required)
        :return: LocationWarnings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_create_with_http_info(article, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_create_with_http_info(article, **kwargs)  # noqa: E501
            return data

    def private_article_create_with_http_info(self, article, **kwargs):  # noqa: E501
        """Create new Article  # noqa: E501

        Create a new Article by sending article information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_create_with_http_info(article, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArticleCreate article: Article description (required)
        :return: LocationWarnings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article' is set
        if self.api_client.client_side_validation and ('article' not in params or
                                                       params['article'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article` when calling `private_article_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'article' in params:
            body_params = params['article']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocationWarnings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_delete(self, article_id, **kwargs):  # noqa: E501
        """Delete article  # noqa: E501

        Delete an article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_delete(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_delete_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_delete_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_delete_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """Delete article  # noqa: E501

        Delete an article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_delete_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_details(self, article_id, **kwargs):  # noqa: E501
        """Article details  # noqa: E501

        View a private article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_details(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: ArticleCompletePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_details_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_details_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_details_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """Article details  # noqa: E501

        View a private article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_details_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: ArticleCompletePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_details`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArticleCompletePrivate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_embargo_delete(self, article_id, **kwargs):  # noqa: E501
        """Delete Article Embargo  # noqa: E501

        Will lift the embargo for the specified article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_embargo_delete(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_embargo_delete_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_embargo_delete_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_embargo_delete_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """Delete Article Embargo  # noqa: E501

        Will lift the embargo for the specified article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_embargo_delete_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_embargo_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_embargo_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_embargo_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/embargo', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_embargo_details(self, article_id, **kwargs):  # noqa: E501
        """Article Embargo Details  # noqa: E501

        View a private article embargo details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_embargo_details(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: ArticleEmbargo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_embargo_details_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_embargo_details_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_embargo_details_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """Article Embargo Details  # noqa: E501

        View a private article embargo details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_embargo_details_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: ArticleEmbargo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_embargo_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_embargo_details`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_embargo_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/embargo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArticleEmbargo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_embargo_update(self, article_id, embargo, **kwargs):  # noqa: E501
        """Update Article Embargo  # noqa: E501

        Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_embargo_update(article_id, embargo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param ArticleEmbargoUpdater embargo: Embargo description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_embargo_update_with_http_info(article_id, embargo, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_embargo_update_with_http_info(article_id, embargo, **kwargs)  # noqa: E501
            return data

    def private_article_embargo_update_with_http_info(self, article_id, embargo, **kwargs):  # noqa: E501
        """Update Article Embargo  # noqa: E501

        Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_embargo_update_with_http_info(article_id, embargo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param ArticleEmbargoUpdater embargo: Embargo description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'embargo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_embargo_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_embargo_update`")  # noqa: E501
        # verify the required parameter 'embargo' is set
        if self.api_client.client_side_validation and ('embargo' not in params or
                                                       params['embargo'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `embargo` when calling `private_article_embargo_update`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_embargo_update`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'embargo' in params:
            body_params = params['embargo']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/embargo', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_file(self, article_id, file_id, **kwargs):  # noqa: E501
        """Single File  # noqa: E501

        View details of file for specified article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_file(article_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: PrivateFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_file_with_http_info(article_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_file_with_http_info(article_id, file_id, **kwargs)  # noqa: E501
            return data

    def private_article_file_with_http_info(self, article_id, file_id, **kwargs):  # noqa: E501
        """Single File  # noqa: E501

        View details of file for specified article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_file_with_http_info(article_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: PrivateFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_file`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `private_article_file`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_file`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('file_id' in params and params['file_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `file_id` when calling `private_article_file`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/files/{file_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrivateFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_file_delete(self, article_id, file_id, **kwargs):  # noqa: E501
        """File Delete  # noqa: E501

        Complete file upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_file_delete(article_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_file_delete_with_http_info(article_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_file_delete_with_http_info(article_id, file_id, **kwargs)  # noqa: E501
            return data

    def private_article_file_delete_with_http_info(self, article_id, file_id, **kwargs):  # noqa: E501
        """File Delete  # noqa: E501

        Complete file upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_file_delete_with_http_info(article_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_file_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_file_delete`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `private_article_file_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_file_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('file_id' in params and params['file_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `file_id` when calling `private_article_file_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/files/{file_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_files_list(self, article_id, **kwargs):  # noqa: E501
        """List article files  # noqa: E501

        List private files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_files_list(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: list[PrivateFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_files_list_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_files_list_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_files_list_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """List article files  # noqa: E501

        List private files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_files_list_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: list[PrivateFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_files_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_files_list`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_files_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PrivateFile]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_private_link(self, article_id, **kwargs):  # noqa: E501
        """List private links  # noqa: E501

        List private links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_private_link(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: list[PrivateLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_private_link_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_private_link_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_private_link_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """List private links  # noqa: E501

        List private links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_private_link_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: list[PrivateLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_private_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_private_link`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_private_link`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/private_links', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PrivateLink]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_private_link_create(self, article_id, **kwargs):  # noqa: E501
        """Create private link  # noqa: E501

        Create new private link for this article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_private_link_create(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param PrivateLinkCreator private_link:
        :return: PrivateLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_private_link_create_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_private_link_create_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_private_link_create_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """Create private link  # noqa: E501

        Create new private link for this article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_private_link_create_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param PrivateLinkCreator private_link:
        :return: PrivateLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'private_link']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_private_link_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_private_link_create`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_private_link_create`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'private_link' in params:
            body_params = params['private_link']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/private_links', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrivateLinkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_private_link_delete(self, article_id, link_id, **kwargs):  # noqa: E501
        """Disable private link  # noqa: E501

        Disable/delete private link for this article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_private_link_delete(article_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param str link_id: Private link token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_private_link_delete_with_http_info(article_id, link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_private_link_delete_with_http_info(article_id, link_id, **kwargs)  # noqa: E501
            return data

    def private_article_private_link_delete_with_http_info(self, article_id, link_id, **kwargs):  # noqa: E501
        """Disable private link  # noqa: E501

        Disable/delete private link for this article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_private_link_delete_with_http_info(article_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param str link_id: Private link token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_private_link_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_private_link_delete`")  # noqa: E501
        # verify the required parameter 'link_id' is set
        if self.api_client.client_side_validation and ('link_id' not in params or
                                                       params['link_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `link_id` when calling `private_article_private_link_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_private_link_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'link_id' in params:
            path_params['link_id'] = params['link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/private_links/{link_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_private_link_update(self, article_id, link_id, **kwargs):  # noqa: E501
        """Update private link  # noqa: E501

        Update existing private link for this article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_private_link_update(article_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param str link_id: Private link token (required)
        :param PrivateLinkCreator private_link:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_private_link_update_with_http_info(article_id, link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_private_link_update_with_http_info(article_id, link_id, **kwargs)  # noqa: E501
            return data

    def private_article_private_link_update_with_http_info(self, article_id, link_id, **kwargs):  # noqa: E501
        """Update private link  # noqa: E501

        Update existing private link for this article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_private_link_update_with_http_info(article_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param str link_id: Private link token (required)
        :param PrivateLinkCreator private_link:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'link_id', 'private_link']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_private_link_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_private_link_update`")  # noqa: E501
        # verify the required parameter 'link_id' is set
        if self.api_client.client_side_validation and ('link_id' not in params or
                                                       params['link_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `link_id` when calling `private_article_private_link_update`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_private_link_update`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'link_id' in params:
            path_params['link_id'] = params['link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'private_link' in params:
            body_params = params['private_link']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/private_links/{link_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_publish(self, article_id, **kwargs):  # noqa: E501
        """Private Article Publish  # noqa: E501

        - If the whole article is under embargo, it will not be published immediately, but when the embargo expires or is lifted. - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_publish(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_publish_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_publish_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_publish_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """Private Article Publish  # noqa: E501

        - If the whole article is under embargo, it will not be published immediately, but when the embargo expires or is lifted. - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_publish_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_publish" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_publish`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_publish`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/publish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_reserve_doi(self, article_id, **kwargs):  # noqa: E501
        """Private Article Reserve DOI  # noqa: E501

        Reserve DOI for article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_reserve_doi(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: ArticleDOI
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_reserve_doi_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_reserve_doi_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_reserve_doi_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """Private Article Reserve DOI  # noqa: E501

        Reserve DOI for article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_reserve_doi_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: ArticleDOI
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_reserve_doi" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_reserve_doi`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_reserve_doi`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/reserve_doi', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArticleDOI',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_reserve_handle(self, article_id, **kwargs):  # noqa: E501
        """Private Article Reserve Handle  # noqa: E501

        Reserve Handle for article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_reserve_handle(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: ArticleHandle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_reserve_handle_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_reserve_handle_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def private_article_reserve_handle_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """Private Article Reserve Handle  # noqa: E501

        Reserve Handle for article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_reserve_handle_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :return: ArticleHandle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_reserve_handle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_reserve_handle`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_reserve_handle`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/reserve_handle', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArticleHandle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_resource(self, article_id, resource, **kwargs):  # noqa: E501
        """Private Article Resource  # noqa: E501

        Edit article resource data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_resource(article_id, resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param Resource resource: Resource data (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_resource_with_http_info(article_id, resource, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_resource_with_http_info(article_id, resource, **kwargs)  # noqa: E501
            return data

    def private_article_resource_with_http_info(self, article_id, resource, **kwargs):  # noqa: E501
        """Private Article Resource  # noqa: E501

        Edit article resource data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_resource_with_http_info(article_id, resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param Resource resource: Resource data (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'resource']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_resource`")  # noqa: E501
        # verify the required parameter 'resource' is set
        if self.api_client.client_side_validation and ('resource' not in params or
                                                       params['resource'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource` when calling `private_article_resource`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_resource`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resource' in params:
            body_params = params['resource']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/resource', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_update(self, article_id, article, **kwargs):  # noqa: E501
        """Update article  # noqa: E501

        Updating an article by passing body parameters; request can also be made with the PATCH method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_update(article_id, article, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param ArticleUpdate article: Article description (required)
        :return: LocationWarningsUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_update_with_http_info(article_id, article, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_update_with_http_info(article_id, article, **kwargs)  # noqa: E501
            return data

    def private_article_update_with_http_info(self, article_id, article, **kwargs):  # noqa: E501
        """Update article  # noqa: E501

        Updating an article by passing body parameters; request can also be made with the PATCH method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_update_with_http_info(article_id, article, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param ArticleUpdate article: Article description (required)
        :return: LocationWarningsUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'article']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_update`")  # noqa: E501
        # verify the required parameter 'article' is set
        if self.api_client.client_side_validation and ('article' not in params or
                                                       params['article'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article` when calling `private_article_update`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_update`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'article' in params:
            body_params = params['article']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocationWarningsUpdate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_upload_complete(self, article_id, file_id, **kwargs):  # noqa: E501
        """Complete Upload  # noqa: E501

        Complete file upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_upload_complete(article_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_upload_complete_with_http_info(article_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_upload_complete_with_http_info(article_id, file_id, **kwargs)  # noqa: E501
            return data

    def private_article_upload_complete_with_http_info(self, article_id, file_id, **kwargs):  # noqa: E501
        """Complete Upload  # noqa: E501

        Complete file upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_upload_complete_with_http_info(article_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_upload_complete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_upload_complete`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `private_article_upload_complete`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_upload_complete`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('file_id' in params and params['file_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `file_id` when calling `private_article_upload_complete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/files/{file_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_article_upload_initiate(self, article_id, file, **kwargs):  # noqa: E501
        """Initiate Upload  # noqa: E501

        Initiate a new file upload within the article. Either use the link property to point to an existing file that resides elsewhere and will not be uploaded to Figshare or use the other 3 parameters (md5, name, size).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_upload_initiate(article_id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param FileCreator file: (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_article_upload_initiate_with_http_info(article_id, file, **kwargs)  # noqa: E501
        else:
            (data) = self.private_article_upload_initiate_with_http_info(article_id, file, **kwargs)  # noqa: E501
            return data

    def private_article_upload_initiate_with_http_info(self, article_id, file, **kwargs):  # noqa: E501
        """Initiate Upload  # noqa: E501

        Initiate a new file upload within the article. Either use the link property to point to an existing file that resides elsewhere and will not be uploaded to Figshare or use the other 3 parameters (md5, name, size).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_article_upload_initiate_with_http_info(article_id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: Article unique identifier (required)
        :param FileCreator file: (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_upload_initiate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_upload_initiate`")  # noqa: E501
        # verify the required parameter 'file' is set
        if self.api_client.client_side_validation and ('file' not in params or
                                                       params['file'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file` when calling `private_article_upload_initiate`")  # noqa: E501

        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_upload_initiate`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'file' in params:
            body_params = params['file']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/{article_id}/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_articles_list(self, **kwargs):  # noqa: E501
        """Private Articles  # noqa: E501

        Get Own Articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_articles_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_articles_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_articles_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_articles_list_with_http_info(self, **kwargs):  # noqa: E501
        """Private Articles  # noqa: E501

        Get Own Articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_articles_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_articles_list" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('page' in params and params['page'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_articles_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_articles_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_articles_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_articles_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_articles_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Article]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_articles_search(self, search, **kwargs):  # noqa: E501
        """Private Articles search  # noqa: E501

        Returns a list of private articles filtered by the search parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_articles_search(search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrivateArticleSearch search: Search Parameters (required)
        :return: list[ArticleWithProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_articles_search_with_http_info(search, **kwargs)  # noqa: E501
        else:
            (data) = self.private_articles_search_with_http_info(search, **kwargs)  # noqa: E501
            return data

    def private_articles_search_with_http_info(self, search, **kwargs):  # noqa: E501
        """Private Articles search  # noqa: E501

        Returns a list of private articles filtered by the search parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_articles_search_with_http_info(search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrivateArticleSearch search: Search Parameters (required)
        :return: list[ArticleWithProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_articles_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search' is set
        if self.api_client.client_side_validation and ('search' not in params or
                                                       params['search'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search` when calling `private_articles_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/articles/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ArticleWithProject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
