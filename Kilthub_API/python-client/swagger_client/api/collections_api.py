# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CollectionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def collection_articles(self, collection_id, **kwargs):  # noqa: E501
        """Public Collection Articles  # noqa: E501

        Returns a list of public collection articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collection_articles(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collection_articles_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collection_articles_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def collection_articles_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """Public Collection Articles  # noqa: E501

        Returns a list of public collection articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collection_articles_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'page', 'page_size', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collection_articles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `collection_articles`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `collection_articles`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `collection_articles`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `collection_articles`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `collection_articles`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `collection_articles`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `collection_articles`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `collection_articles`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `collection_articles`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `collection_articles`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection_id}/articles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Article]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collection_details(self, collection_id, **kwargs):  # noqa: E501
        """Collection details  # noqa: E501

        View a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collection_details(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collection_details_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collection_details_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def collection_details_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """Collection details  # noqa: E501

        View a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collection_details_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collection_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `collection_details`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `collection_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionComplete',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collection_version_details(self, collection_id, version_id, **kwargs):  # noqa: E501
        """Collection Version details  # noqa: E501

        View details for a certain version of a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collection_version_details(collection_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :param int version_id: Version Number (required)
        :return: CollectionComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collection_version_details_with_http_info(collection_id, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collection_version_details_with_http_info(collection_id, version_id, **kwargs)  # noqa: E501
            return data

    def collection_version_details_with_http_info(self, collection_id, version_id, **kwargs):  # noqa: E501
        """Collection Version details  # noqa: E501

        View details for a certain version of a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collection_version_details_with_http_info(collection_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :param int version_id: Version Number (required)
        :return: CollectionComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collection_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `collection_version_details`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `collection_version_details`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `collection_version_details`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('version_id' in params and params['version_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `version_id` when calling `collection_version_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501
        if 'version_id' in params:
            path_params['version_id'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection_id}/versions/{version_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionComplete',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collection_versions(self, collection_id, **kwargs):  # noqa: E501
        """Collection Versions list  # noqa: E501

        Returns a list of public collection Versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collection_versions(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: list[CollectionVersions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collection_versions_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collection_versions_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def collection_versions_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """Collection Versions list  # noqa: E501

        Returns a list of public collection Versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collection_versions_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: list[CollectionVersions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collection_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `collection_versions`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `collection_versions`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection_id}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CollectionVersions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_list(self, **kwargs):  # noqa: E501
        """Public Collections  # noqa: E501

        Returns a list of public collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param int institution: only return collections from this institution
        :param str published_since: Filter by collection publishing date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
        :param str modified_since: Filter by collection modified date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
        :param int group: only return collections from this group
        :param str resource_doi: only return collections with this resource_doi
        :param str doi: only return collections with this doi
        :param str handle: only return collections with this handle
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.collections_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def collections_list_with_http_info(self, **kwargs):  # noqa: E501
        """Public Collections  # noqa: E501

        Returns a list of public collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param int institution: only return collections from this institution
        :param str published_since: Filter by collection publishing date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
        :param str modified_since: Filter by collection modified date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
        :param int group: only return collections from this group
        :param str resource_doi: only return collections with this resource_doi
        :param str doi: only return collections with this doi
        :param str handle: only return collections with this handle
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_cursor', 'page', 'page_size', 'limit', 'offset', 'order', 'order_direction', 'institution', 'published_since', 'modified_since', 'group', 'resource_doi', 'doi', 'handle']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_list" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('page' in params and params['page'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `collections_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `collections_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `collections_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `collections_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `collections_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `collections_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `collections_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `collections_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))  # noqa: E501
        if 'institution' in params:
            query_params.append(('institution', params['institution']))  # noqa: E501
        if 'published_since' in params:
            query_params.append(('published_since', params['published_since']))  # noqa: E501
        if 'modified_since' in params:
            query_params.append(('modified_since', params['modified_since']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
        if 'resource_doi' in params:
            query_params.append(('resource_doi', params['resource_doi']))  # noqa: E501
        if 'doi' in params:
            query_params.append(('doi', params['doi']))  # noqa: E501
        if 'handle' in params:
            query_params.append(('handle', params['handle']))  # noqa: E501

        header_params = {}
        if 'x_cursor' in params:
            header_params['X-Cursor'] = params['x_cursor']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Collection]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_search(self, **kwargs):  # noqa: E501
        """Public Collections Search  # noqa: E501

        Returns a list of public collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param CollectionSearch search: Search Parameters
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.collections_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def collections_search_with_http_info(self, **kwargs):  # noqa: E501
        """Public Collections Search  # noqa: E501

        Returns a list of public collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param CollectionSearch search: Search Parameters
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_cursor', 'search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_cursor' in params:
            header_params['X-Cursor'] = params['x_cursor']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Collection]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_article_delete(self, collection_id, article_id, **kwargs):  # noqa: E501
        """Delete collection article  # noqa: E501

        De-associate article from collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_article_delete(collection_id, article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param int article_id: Collection article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_article_delete_with_http_info(collection_id, article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_article_delete_with_http_info(collection_id, article_id, **kwargs)  # noqa: E501
            return data

    def private_collection_article_delete_with_http_info(self, collection_id, article_id, **kwargs):  # noqa: E501
        """Delete collection article  # noqa: E501

        De-associate article from collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_article_delete_with_http_info(collection_id, article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param int article_id: Collection article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_article_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_article_delete`")  # noqa: E501
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_collection_article_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_article_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_collection_article_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/articles/{article_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_articles_add(self, collection_id, articles, **kwargs):  # noqa: E501
        """Add collection articles  # noqa: E501

        Associate new articles with the collection. This will add new articles to the list of already associated articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_articles_add(collection_id, articles, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param ArticlesCreator articles: Articles list (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_articles_add_with_http_info(collection_id, articles, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_articles_add_with_http_info(collection_id, articles, **kwargs)  # noqa: E501
            return data

    def private_collection_articles_add_with_http_info(self, collection_id, articles, **kwargs):  # noqa: E501
        """Add collection articles  # noqa: E501

        Associate new articles with the collection. This will add new articles to the list of already associated articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_articles_add_with_http_info(collection_id, articles, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param ArticlesCreator articles: Articles list (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'articles']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_articles_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_articles_add`")  # noqa: E501
        # verify the required parameter 'articles' is set
        if self.api_client.client_side_validation and ('articles' not in params or
                                                       params['articles'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `articles` when calling `private_collection_articles_add`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_articles_add`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'articles' in params:
            body_params = params['articles']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/articles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_articles_list(self, collection_id, **kwargs):  # noqa: E501
        """List collection articles  # noqa: E501

        List collection articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_articles_list(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_articles_list_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_articles_list_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def private_collection_articles_list_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """List collection articles  # noqa: E501

        List collection articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_articles_list_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'page', 'page_size', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_articles_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_articles_list`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_collection_articles_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_collection_articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_collection_articles_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_collection_articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_collection_articles_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_collection_articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_collection_articles_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_collection_articles_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/articles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Article]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_articles_replace(self, collection_id, articles, **kwargs):  # noqa: E501
        """Replace collection articles  # noqa: E501

        Associate new articles with the collection. This will remove all already associated articles and add these new ones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_articles_replace(collection_id, articles, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param ArticlesCreator articles: Articles List (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_articles_replace_with_http_info(collection_id, articles, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_articles_replace_with_http_info(collection_id, articles, **kwargs)  # noqa: E501
            return data

    def private_collection_articles_replace_with_http_info(self, collection_id, articles, **kwargs):  # noqa: E501
        """Replace collection articles  # noqa: E501

        Associate new articles with the collection. This will remove all already associated articles and add these new ones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_articles_replace_with_http_info(collection_id, articles, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param ArticlesCreator articles: Articles List (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'articles']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_articles_replace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_articles_replace`")  # noqa: E501
        # verify the required parameter 'articles' is set
        if self.api_client.client_side_validation and ('articles' not in params or
                                                       params['articles'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `articles` when calling `private_collection_articles_replace`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_articles_replace`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'articles' in params:
            body_params = params['articles']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/articles', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_author_delete(self, collection_id, author_id, **kwargs):  # noqa: E501
        """Delete collection author  # noqa: E501

        Delete collection author  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_author_delete(collection_id, author_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param int author_id: Collection Author unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_author_delete_with_http_info(collection_id, author_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_author_delete_with_http_info(collection_id, author_id, **kwargs)  # noqa: E501
            return data

    def private_collection_author_delete_with_http_info(self, collection_id, author_id, **kwargs):  # noqa: E501
        """Delete collection author  # noqa: E501

        Delete collection author  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_author_delete_with_http_info(collection_id, author_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param int author_id: Collection Author unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'author_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_author_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_author_delete`")  # noqa: E501
        # verify the required parameter 'author_id' is set
        if self.api_client.client_side_validation and ('author_id' not in params or
                                                       params['author_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `author_id` when calling `private_collection_author_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_author_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('author_id' in params and params['author_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `author_id` when calling `private_collection_author_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501
        if 'author_id' in params:
            path_params['author_id'] = params['author_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/authors/{author_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_authors_add(self, collection_id, authors, **kwargs):  # noqa: E501
        """Add collection authors  # noqa: E501

        Associate new authors with the collection. This will add new authors to the list of already associated authors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_authors_add(collection_id, authors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param AuthorsCreator authors: List of authors (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_authors_add_with_http_info(collection_id, authors, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_authors_add_with_http_info(collection_id, authors, **kwargs)  # noqa: E501
            return data

    def private_collection_authors_add_with_http_info(self, collection_id, authors, **kwargs):  # noqa: E501
        """Add collection authors  # noqa: E501

        Associate new authors with the collection. This will add new authors to the list of already associated authors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_authors_add_with_http_info(collection_id, authors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param AuthorsCreator authors: List of authors (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'authors']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_authors_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_authors_add`")  # noqa: E501
        # verify the required parameter 'authors' is set
        if self.api_client.client_side_validation and ('authors' not in params or
                                                       params['authors'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authors` when calling `private_collection_authors_add`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_authors_add`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authors' in params:
            body_params = params['authors']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/authors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_authors_list(self, collection_id, **kwargs):  # noqa: E501
        """List collection authors  # noqa: E501

        List collection authors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_authors_list(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :return: list[Author]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_authors_list_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_authors_list_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def private_collection_authors_list_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """List collection authors  # noqa: E501

        List collection authors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_authors_list_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :return: list[Author]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_authors_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_authors_list`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_authors_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/authors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Author]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_authors_replace(self, collection_id, authors, **kwargs):  # noqa: E501
        """Replace collection authors  # noqa: E501

        Associate new authors with the collection. This will remove all already associated authors and add these new ones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_authors_replace(collection_id, authors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param AuthorsCreator authors: List of authors (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_authors_replace_with_http_info(collection_id, authors, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_authors_replace_with_http_info(collection_id, authors, **kwargs)  # noqa: E501
            return data

    def private_collection_authors_replace_with_http_info(self, collection_id, authors, **kwargs):  # noqa: E501
        """Replace collection authors  # noqa: E501

        Associate new authors with the collection. This will remove all already associated authors and add these new ones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_authors_replace_with_http_info(collection_id, authors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param AuthorsCreator authors: List of authors (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'authors']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_authors_replace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_authors_replace`")  # noqa: E501
        # verify the required parameter 'authors' is set
        if self.api_client.client_side_validation and ('authors' not in params or
                                                       params['authors'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authors` when calling `private_collection_authors_replace`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_authors_replace`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authors' in params:
            body_params = params['authors']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/authors', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_categories_add(self, collection_id, categories, **kwargs):  # noqa: E501
        """Add collection categories  # noqa: E501

        Associate new categories with the collection. This will add new categories to the list of already associated categories  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_categories_add(collection_id, categories, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param CategoriesCreator categories: Categories list (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_categories_add_with_http_info(collection_id, categories, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_categories_add_with_http_info(collection_id, categories, **kwargs)  # noqa: E501
            return data

    def private_collection_categories_add_with_http_info(self, collection_id, categories, **kwargs):  # noqa: E501
        """Add collection categories  # noqa: E501

        Associate new categories with the collection. This will add new categories to the list of already associated categories  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_categories_add_with_http_info(collection_id, categories, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param CategoriesCreator categories: Categories list (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'categories']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_categories_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_categories_add`")  # noqa: E501
        # verify the required parameter 'categories' is set
        if self.api_client.client_side_validation and ('categories' not in params or
                                                       params['categories'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `categories` when calling `private_collection_categories_add`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_categories_add`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'categories' in params:
            body_params = params['categories']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/categories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_categories_list(self, collection_id, **kwargs):  # noqa: E501
        """List collection categories  # noqa: E501

        List collection categories  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_categories_list(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_categories_list_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_categories_list_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def private_collection_categories_list_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """List collection categories  # noqa: E501

        List collection categories  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_categories_list_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_categories_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_categories_list`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_categories_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Category]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_categories_replace(self, collection_id, categories, **kwargs):  # noqa: E501
        """Replace collection categories  # noqa: E501

        Associate new categories with the collection. This will remove all already associated categories and add these new ones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_categories_replace(collection_id, categories, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param CategoriesCreator categories: Categories list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_categories_replace_with_http_info(collection_id, categories, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_categories_replace_with_http_info(collection_id, categories, **kwargs)  # noqa: E501
            return data

    def private_collection_categories_replace_with_http_info(self, collection_id, categories, **kwargs):  # noqa: E501
        """Replace collection categories  # noqa: E501

        Associate new categories with the collection. This will remove all already associated categories and add these new ones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_categories_replace_with_http_info(collection_id, categories, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param CategoriesCreator categories: Categories list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'categories']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_categories_replace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_categories_replace`")  # noqa: E501
        # verify the required parameter 'categories' is set
        if self.api_client.client_side_validation and ('categories' not in params or
                                                       params['categories'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `categories` when calling `private_collection_categories_replace`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_categories_replace`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'categories' in params:
            body_params = params['categories']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/categories', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_category_delete(self, collection_id, category_id, **kwargs):  # noqa: E501
        """Delete collection category  # noqa: E501

        De-associate category from collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_category_delete(collection_id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param int category_id: Collection category unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_category_delete_with_http_info(collection_id, category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_category_delete_with_http_info(collection_id, category_id, **kwargs)  # noqa: E501
            return data

    def private_collection_category_delete_with_http_info(self, collection_id, category_id, **kwargs):  # noqa: E501
        """Delete collection category  # noqa: E501

        De-associate category from collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_category_delete_with_http_info(collection_id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param int category_id: Collection category unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_category_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_category_delete`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if self.api_client.client_side_validation and ('category_id' not in params or
                                                       params['category_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `category_id` when calling `private_collection_category_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_category_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('category_id' in params and params['category_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `category_id` when calling `private_collection_category_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501
        if 'category_id' in params:
            path_params['category_id'] = params['category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/categories/{category_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_create(self, collection, **kwargs):  # noqa: E501
        """Create collection  # noqa: E501

        Create a new Collection by sending collection information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_create(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CollectionCreate collection: Collection description (required)
        :return: LocationWarnings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_create_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_create_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def private_collection_create_with_http_info(self, collection, **kwargs):  # noqa: E501
        """Create collection  # noqa: E501

        Create a new Collection by sending collection information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_create_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CollectionCreate collection: Collection description (required)
        :return: LocationWarnings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `private_collection_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'collection' in params:
            body_params = params['collection']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocationWarnings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_delete(self, collection_id, **kwargs):  # noqa: E501
        """Delete collection  # noqa: E501

        Delete n collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_delete(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_delete_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_delete_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def private_collection_delete_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """Delete collection  # noqa: E501

        Delete n collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_delete_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_details(self, collection_id, **kwargs):  # noqa: E501
        """Collection details  # noqa: E501

        View a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_details(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionCompletePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_details_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_details_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def private_collection_details_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """Collection details  # noqa: E501

        View a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_details_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionCompletePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_details`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionCompletePrivate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_private_link_create(self, collection_id, **kwargs):  # noqa: E501
        """Create collection private link  # noqa: E501

        Create new private link  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_private_link_create(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param CollectionPrivateLinkCreator private_link:
        :return: PrivateLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_private_link_create_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_private_link_create_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def private_collection_private_link_create_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """Create collection private link  # noqa: E501

        Create new private link  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_private_link_create_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param CollectionPrivateLinkCreator private_link:
        :return: PrivateLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'private_link']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_private_link_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_private_link_create`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_private_link_create`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'private_link' in params:
            body_params = params['private_link']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/private_links', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrivateLinkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_private_link_delete(self, collection_id, link_id, **kwargs):  # noqa: E501
        """Disable private link  # noqa: E501

        Disable/delete private link for this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_private_link_delete(collection_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param str link_id: Private link token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_private_link_delete_with_http_info(collection_id, link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_private_link_delete_with_http_info(collection_id, link_id, **kwargs)  # noqa: E501
            return data

    def private_collection_private_link_delete_with_http_info(self, collection_id, link_id, **kwargs):  # noqa: E501
        """Disable private link  # noqa: E501

        Disable/delete private link for this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_private_link_delete_with_http_info(collection_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param str link_id: Private link token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_private_link_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_private_link_delete`")  # noqa: E501
        # verify the required parameter 'link_id' is set
        if self.api_client.client_side_validation and ('link_id' not in params or
                                                       params['link_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `link_id` when calling `private_collection_private_link_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_private_link_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501
        if 'link_id' in params:
            path_params['link_id'] = params['link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/private_links/{link_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_private_link_update(self, collection_id, link_id, **kwargs):  # noqa: E501
        """Update collection private link  # noqa: E501

        Update existing private link for this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_private_link_update(collection_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param str link_id: Private link token (required)
        :param CollectionPrivateLinkCreator private_link:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_private_link_update_with_http_info(collection_id, link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_private_link_update_with_http_info(collection_id, link_id, **kwargs)  # noqa: E501
            return data

    def private_collection_private_link_update_with_http_info(self, collection_id, link_id, **kwargs):  # noqa: E501
        """Update collection private link  # noqa: E501

        Update existing private link for this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_private_link_update_with_http_info(collection_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param str link_id: Private link token (required)
        :param CollectionPrivateLinkCreator private_link:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'link_id', 'private_link']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_private_link_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_private_link_update`")  # noqa: E501
        # verify the required parameter 'link_id' is set
        if self.api_client.client_side_validation and ('link_id' not in params or
                                                       params['link_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `link_id` when calling `private_collection_private_link_update`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_private_link_update`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501
        if 'link_id' in params:
            path_params['link_id'] = params['link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'private_link' in params:
            body_params = params['private_link']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/private_links/{link_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_private_links_list(self, collection_id, **kwargs):  # noqa: E501
        """List collection private links  # noqa: E501

        List article private links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_private_links_list(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :return: list[PrivateLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_private_links_list_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_private_links_list_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def private_collection_private_links_list_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """List collection private links  # noqa: E501

        List article private links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_private_links_list_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :return: list[PrivateLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_private_links_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_private_links_list`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_private_links_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/private_links', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PrivateLink]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_publish(self, collection_id, **kwargs):  # noqa: E501
        """Private Collection Publish  # noqa: E501

        When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_publish(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_publish_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_publish_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def private_collection_publish_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """Private Collection Publish  # noqa: E501

        When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_publish_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_publish" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_publish`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_publish`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/publish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_reserve_doi(self, collection_id, **kwargs):  # noqa: E501
        """Private Collection Reserve DOI  # noqa: E501

        Reserve DOI for collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_reserve_doi(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionDOI
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_reserve_doi_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_reserve_doi_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def private_collection_reserve_doi_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """Private Collection Reserve DOI  # noqa: E501

        Reserve DOI for collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_reserve_doi_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionDOI
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_reserve_doi" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_reserve_doi`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_reserve_doi`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/reserve_doi', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionDOI',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_reserve_handle(self, collection_id, **kwargs):  # noqa: E501
        """Private Collection Reserve Handle  # noqa: E501

        Reserve Handle for collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_reserve_handle(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionHandle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_reserve_handle_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_reserve_handle_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def private_collection_reserve_handle_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """Private Collection Reserve Handle  # noqa: E501

        Reserve Handle for collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_reserve_handle_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionHandle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_reserve_handle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_reserve_handle`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_reserve_handle`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/reserve_handle', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionHandle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_resource(self, collection_id, resource, **kwargs):  # noqa: E501
        """Private Collection Resource  # noqa: E501

        Edit collection resource data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_resource(collection_id, resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param Resource resource: Resource data (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_resource_with_http_info(collection_id, resource, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_resource_with_http_info(collection_id, resource, **kwargs)  # noqa: E501
            return data

    def private_collection_resource_with_http_info(self, collection_id, resource, **kwargs):  # noqa: E501
        """Private Collection Resource  # noqa: E501

        Edit collection resource data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_resource_with_http_info(collection_id, resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection unique identifier (required)
        :param Resource resource: Resource data (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'resource']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_resource`")  # noqa: E501
        # verify the required parameter 'resource' is set
        if self.api_client.client_side_validation and ('resource' not in params or
                                                       params['resource'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource` when calling `private_collection_resource`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_resource`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resource' in params:
            body_params = params['resource']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}/resource', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collection_update(self, collection_id, collection, **kwargs):  # noqa: E501
        """Update collection  # noqa: E501

        Update collection details; request can also be made with the PATCH method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_update(collection_id, collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :param CollectionUpdate collection: Collection description (required)
        :return: LocationWarningsUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collection_update_with_http_info(collection_id, collection, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collection_update_with_http_info(collection_id, collection, **kwargs)  # noqa: E501
            return data

    def private_collection_update_with_http_info(self, collection_id, collection, **kwargs):  # noqa: E501
        """Update collection  # noqa: E501

        Update collection details; request can also be made with the PATCH method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collection_update_with_http_info(collection_id, collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int collection_id: Collection Unique identifier (required)
        :param CollectionUpdate collection: Collection description (required)
        :return: LocationWarningsUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if self.api_client.client_side_validation and ('collection_id' not in params or
                                                       params['collection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_update`")  # noqa: E501
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `private_collection_update`")  # noqa: E501

        if self.api_client.client_side_validation and ('collection_id' in params and params['collection_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_update`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'collection' in params:
            body_params = params['collection']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/{collection_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocationWarningsUpdate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collections_list(self, **kwargs):  # noqa: E501
        """Private Collections List  # noqa: E501

        List private collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collections_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collections_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_collections_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_collections_list_with_http_info(self, **kwargs):  # noqa: E501
        """Private Collections List  # noqa: E501

        List private collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collections_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'limit', 'offset', 'order', 'order_direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collections_list" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('page' in params and params['page'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_collections_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_collections_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_collections_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_collections_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_collections_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_collections_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_collections_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_collections_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Collection]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_collections_search(self, search, **kwargs):  # noqa: E501
        """Private Collections Search  # noqa: E501

        Returns a list of private Collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collections_search(search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrivateCollectionSearch search: Search Parameters (required)
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_collections_search_with_http_info(search, **kwargs)  # noqa: E501
        else:
            (data) = self.private_collections_search_with_http_info(search, **kwargs)  # noqa: E501
            return data

    def private_collections_search_with_http_info(self, search, **kwargs):  # noqa: E501
        """Private Collections Search  # noqa: E501

        Returns a list of private Collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_collections_search_with_http_info(search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrivateCollectionSearch search: Search Parameters (required)
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collections_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search' is set
        if self.api_client.client_side_validation and ('search' not in params or
                                                       params['search'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search` when calling `private_collections_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/collections/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Collection]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
