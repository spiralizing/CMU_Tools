# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class InstitutionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_institution_curation(self, curation_id, **kwargs):  # noqa: E501
        """Institution Curation Review  # noqa: E501

        Retrieve a certain curation review by its ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_institution_curation(curation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curation_id: ID of the curation (required)
        :return: CurationDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_institution_curation_with_http_info(curation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.account_institution_curation_with_http_info(curation_id, **kwargs)  # noqa: E501
            return data

    def account_institution_curation_with_http_info(self, curation_id, **kwargs):  # noqa: E501
        """Institution Curation Review  # noqa: E501

        Retrieve a certain curation review by its ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_institution_curation_with_http_info(curation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curation_id: ID of the curation (required)
        :return: CurationDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_institution_curation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'curation_id' is set
        if self.api_client.client_side_validation and ('curation_id' not in params or
                                                       params['curation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `curation_id` when calling `account_institution_curation`")  # noqa: E501

        if self.api_client.client_side_validation and ('curation_id' in params and params['curation_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `curation_id` when calling `account_institution_curation`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'curation_id' in params:
            path_params['curation_id'] = params['curation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/review/{curation_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CurationDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_institution_curation_comments(self, curation_id, **kwargs):  # noqa: E501
        """Institution Curation Review Comments  # noqa: E501

        Retrieve a certain curation review's comments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_institution_curation_comments(curation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curation_id: ID of the curation (required)
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: CurationComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_institution_curation_comments_with_http_info(curation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.account_institution_curation_comments_with_http_info(curation_id, **kwargs)  # noqa: E501
            return data

    def account_institution_curation_comments_with_http_info(self, curation_id, **kwargs):  # noqa: E501
        """Institution Curation Review Comments  # noqa: E501

        Retrieve a certain curation review's comments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_institution_curation_comments_with_http_info(curation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curation_id: ID of the curation (required)
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: CurationComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curation_id', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_institution_curation_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'curation_id' is set
        if self.api_client.client_side_validation and ('curation_id' not in params or
                                                       params['curation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `curation_id` when calling `account_institution_curation_comments`")  # noqa: E501

        if self.api_client.client_side_validation and ('curation_id' in params and params['curation_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `curation_id` when calling `account_institution_curation_comments`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `account_institution_curation_comments`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `account_institution_curation_comments`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `account_institution_curation_comments`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `account_institution_curation_comments`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'curation_id' in params:
            path_params['curation_id'] = params['curation_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/review/{curation_id}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CurationComment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_institution_curation_comments_0(self, curation_id, curation_comment, **kwargs):  # noqa: E501
        """POST Institution Curation Review Comment  # noqa: E501

        Add a new comment to the review.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_institution_curation_comments_0(curation_id, curation_comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curation_id: ID of the curation (required)
        :param CurationCommentCreate curation_comment: The content/value of the comment. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_institution_curation_comments_0_with_http_info(curation_id, curation_comment, **kwargs)  # noqa: E501
        else:
            (data) = self.account_institution_curation_comments_0_with_http_info(curation_id, curation_comment, **kwargs)  # noqa: E501
            return data

    def account_institution_curation_comments_0_with_http_info(self, curation_id, curation_comment, **kwargs):  # noqa: E501
        """POST Institution Curation Review Comment  # noqa: E501

        Add a new comment to the review.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_institution_curation_comments_0_with_http_info(curation_id, curation_comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curation_id: ID of the curation (required)
        :param CurationCommentCreate curation_comment: The content/value of the comment. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curation_id', 'curation_comment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_institution_curation_comments_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'curation_id' is set
        if self.api_client.client_side_validation and ('curation_id' not in params or
                                                       params['curation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `curation_id` when calling `account_institution_curation_comments_0`")  # noqa: E501
        # verify the required parameter 'curation_comment' is set
        if self.api_client.client_side_validation and ('curation_comment' not in params or
                                                       params['curation_comment'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `curation_comment` when calling `account_institution_curation_comments_0`")  # noqa: E501

        if self.api_client.client_side_validation and ('curation_id' in params and params['curation_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `curation_id` when calling `account_institution_curation_comments_0`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'curation_id' in params:
            path_params['curation_id'] = params['curation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'curation_comment' in params:
            body_params = params['curation_comment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/review/{curation_id}/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_institution_curations(self, **kwargs):  # noqa: E501
        """Institution Curation Reviews  # noqa: E501

        Retrieve a list of curation reviews for this institution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_institution_curations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Filter by the group ID
        :param int article_id: Retrieve the reviews for this article
        :param str status: Filter by the status of the review
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: Curation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_institution_curations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_institution_curations_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_institution_curations_with_http_info(self, **kwargs):  # noqa: E501
        """Institution Curation Reviews  # noqa: E501

        Retrieve a list of curation reviews for this institution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_institution_curations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Filter by the group ID
        :param int article_id: Retrieve the reviews for this article
        :param str status: Filter by the status of the review
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: Curation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'article_id', 'status', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_institution_curations" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('group_id' in params and params['group_id'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `group_id` when calling `account_institution_curations`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `account_institution_curations`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `account_institution_curations`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `account_institution_curations`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `account_institution_curations`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `account_institution_curations`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'article_id' in params:
            query_params.append(('article_id', params['article_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/reviews', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Curation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def custom_fields_list(self, **kwargs):  # noqa: E501
        """Private account institution group custom fields  # noqa: E501

        Returns the custom fields in the group the user belongs to, or the ones in the group specified, if the user has access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.custom_fields_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group_id
        :return: list[ShortCustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.custom_fields_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.custom_fields_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def custom_fields_list_with_http_info(self, **kwargs):  # noqa: E501
        """Private account institution group custom fields  # noqa: E501

        Returns the custom fields in the group the user belongs to, or the ones in the group specified, if the user has access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.custom_fields_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group_id
        :return: list[ShortCustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_fields_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/custom_fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ShortCustomField]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def custom_fields_upload(self, custom_field_id, **kwargs):  # noqa: E501
        """Custom fields values files upload  # noqa: E501

        Uploads a CSV containing values for a specific custom field of type <b>dropdown_large_list</b>. More details in the <a href=\"#custom_fields\">Custom Fields section</a>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.custom_fields_upload(custom_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int custom_field_id: Custom field identifier (required)
        :param file external_file: CSV file to be uploaded
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.custom_fields_upload_with_http_info(custom_field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.custom_fields_upload_with_http_info(custom_field_id, **kwargs)  # noqa: E501
            return data

    def custom_fields_upload_with_http_info(self, custom_field_id, **kwargs):  # noqa: E501
        """Custom fields values files upload  # noqa: E501

        Uploads a CSV containing values for a specific custom field of type <b>dropdown_large_list</b>. More details in the <a href=\"#custom_fields\">Custom Fields section</a>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.custom_fields_upload_with_http_info(custom_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int custom_field_id: Custom field identifier (required)
        :param file external_file: CSV file to be uploaded
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['custom_field_id', 'external_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_fields_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'custom_field_id' is set
        if self.api_client.client_side_validation and ('custom_field_id' not in params or
                                                       params['custom_field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `custom_field_id` when calling `custom_fields_upload`")  # noqa: E501

        if self.api_client.client_side_validation and ('custom_field_id' in params and params['custom_field_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `custom_field_id` when calling `custom_fields_upload`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'custom_field_id' in params:
            path_params['custom_field_id'] = params['custom_field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'external_file' in params:
            local_var_files['external_file'] = params['external_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/custom_fields/{custom_field_id}/items/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def institution_articles(self, institution_string_id, resource_id, filename, **kwargs):  # noqa: E501
        """Public Institution Articles  # noqa: E501

        Returns a list of articles belonging to the institution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.institution_articles(institution_string_id, resource_id, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str institution_string_id: (required)
        :param str resource_id: (required)
        :param str filename: (required)
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.institution_articles_with_http_info(institution_string_id, resource_id, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.institution_articles_with_http_info(institution_string_id, resource_id, filename, **kwargs)  # noqa: E501
            return data

    def institution_articles_with_http_info(self, institution_string_id, resource_id, filename, **kwargs):  # noqa: E501
        """Public Institution Articles  # noqa: E501

        Returns a list of articles belonging to the institution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.institution_articles_with_http_info(institution_string_id, resource_id, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str institution_string_id: (required)
        :param str resource_id: (required)
        :param str filename: (required)
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['institution_string_id', 'resource_id', 'filename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method institution_articles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'institution_string_id' is set
        if self.api_client.client_side_validation and ('institution_string_id' not in params or
                                                       params['institution_string_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `institution_string_id` when calling `institution_articles`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if self.api_client.client_side_validation and ('resource_id' not in params or
                                                       params['resource_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_id` when calling `institution_articles`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if self.api_client.client_side_validation and ('filename' not in params or
                                                       params['filename'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filename` when calling `institution_articles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'institution_string_id' in params:
            path_params['institution_string_id'] = params['institution_string_id']  # noqa: E501

        query_params = []
        if 'resource_id' in params:
            query_params.append(('resource_id', params['resource_id']))  # noqa: E501
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/institutions/{institution_string_id}/articles/filter-by', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Article]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def institution_hrfeed_upload(self, **kwargs):  # noqa: E501
        """Private Institution HRfeed Upload  # noqa: E501

        More info in the <a href=\"#hr_feed\">HR Feed section</a>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.institution_hrfeed_upload(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file hrfeed: You can find an example in the Hr Feed section
        :return: ResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.institution_hrfeed_upload_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.institution_hrfeed_upload_with_http_info(**kwargs)  # noqa: E501
            return data

    def institution_hrfeed_upload_with_http_info(self, **kwargs):  # noqa: E501
        """Private Institution HRfeed Upload  # noqa: E501

        More info in the <a href=\"#hr_feed\">HR Feed section</a>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.institution_hrfeed_upload_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file hrfeed: You can find an example in the Hr Feed section
        :return: ResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hrfeed']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method institution_hrfeed_upload" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'hrfeed' in params:
            local_var_files['hrfeed'] = params['hrfeed']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/institution/hrfeed/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_account_institution_user(self, account_id, **kwargs):  # noqa: E501
        """Private Account Institution User  # noqa: E501

        Retrieve institution user information using the account_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_account_institution_user(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: Account identifier the user is associated to (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_account_institution_user_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_account_institution_user_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def private_account_institution_user_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Private Account Institution User  # noqa: E501

        Retrieve institution user information using the account_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_account_institution_user_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: Account identifier the user is associated to (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_account_institution_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `private_account_institution_user`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_id' in params and params['account_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_id` when calling `private_account_institution_user`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/users/{account_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_categories_list(self, **kwargs):  # noqa: E501
        """Private Account Categories  # noqa: E501

        List institution categories (including parent Categories)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_categories_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_categories_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_categories_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_categories_list_with_http_info(self, **kwargs):  # noqa: E501
        """Private Account Categories  # noqa: E501

        List institution categories (including parent Categories)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_categories_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_categories_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Category]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_group_embargo_options_details(self, group_id, **kwargs):  # noqa: E501
        """Private Account Institution Group Embargo Options  # noqa: E501

        Account institution group embargo options details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_group_embargo_options_details(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group identifier (required)
        :return: list[GroupEmbargoOptions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_group_embargo_options_details_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_group_embargo_options_details_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def private_group_embargo_options_details_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """Private Account Institution Group Embargo Options  # noqa: E501

        Account institution group embargo options details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_group_embargo_options_details_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Group identifier (required)
        :return: list[GroupEmbargoOptions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_group_embargo_options_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `private_group_embargo_options_details`")  # noqa: E501

        if self.api_client.client_side_validation and ('group_id' in params and params['group_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `group_id` when calling `private_group_embargo_options_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/groups/{group_id}/embargo_options', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GroupEmbargoOptions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_institution_account_group_role_delete(self, account_id, group_id, role_id, **kwargs):  # noqa: E501
        """Delete Institution Account Group Role  # noqa: E501

        Delete Institution Account Group Role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_account_group_role_delete(account_id, group_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: Account identifier for which to remove the role (required)
        :param int group_id: Group identifier for which to remove the role (required)
        :param int role_id: Role identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_institution_account_group_role_delete_with_http_info(account_id, group_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_institution_account_group_role_delete_with_http_info(account_id, group_id, role_id, **kwargs)  # noqa: E501
            return data

    def private_institution_account_group_role_delete_with_http_info(self, account_id, group_id, role_id, **kwargs):  # noqa: E501
        """Delete Institution Account Group Role  # noqa: E501

        Delete Institution Account Group Role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_account_group_role_delete_with_http_info(account_id, group_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: Account identifier for which to remove the role (required)
        :param int group_id: Group identifier for which to remove the role (required)
        :param int role_id: Role identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'role_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_account_group_role_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `private_institution_account_group_role_delete`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `private_institution_account_group_role_delete`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if self.api_client.client_side_validation and ('role_id' not in params or
                                                       params['role_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role_id` when calling `private_institution_account_group_role_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_id' in params and params['account_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_id` when calling `private_institution_account_group_role_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('group_id' in params and params['group_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `group_id` when calling `private_institution_account_group_role_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('role_id' in params and params['role_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `role_id` when calling `private_institution_account_group_role_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/roles/{account_id}/{group_id}/{role_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_institution_account_group_roles(self, account_id, **kwargs):  # noqa: E501
        """List Institution Account Group Roles  # noqa: E501

        List Institution Account Group Roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_account_group_roles(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: Account identifier the user is associated to (required)
        :return: AccountGroupRoles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_institution_account_group_roles_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_institution_account_group_roles_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def private_institution_account_group_roles_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """List Institution Account Group Roles  # noqa: E501

        List Institution Account Group Roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_account_group_roles_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: Account identifier the user is associated to (required)
        :return: AccountGroupRoles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_account_group_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `private_institution_account_group_roles`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_id' in params and params['account_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_id` when calling `private_institution_account_group_roles`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/roles/{account_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountGroupRoles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_institution_account_group_roles_create(self, account_id, account, **kwargs):  # noqa: E501
        """Add Institution Account Group Roles  # noqa: E501

        Add Institution Account Group Roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_account_group_roles_create(account_id, account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: Account identifier the user is associated to (required)
        :param AccountGroupRolesCreate account: Account description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_institution_account_group_roles_create_with_http_info(account_id, account, **kwargs)  # noqa: E501
        else:
            (data) = self.private_institution_account_group_roles_create_with_http_info(account_id, account, **kwargs)  # noqa: E501
            return data

    def private_institution_account_group_roles_create_with_http_info(self, account_id, account, **kwargs):  # noqa: E501
        """Add Institution Account Group Roles  # noqa: E501

        Add Institution Account Group Roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_account_group_roles_create_with_http_info(account_id, account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: Account identifier the user is associated to (required)
        :param AccountGroupRolesCreate account: Account description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_account_group_roles_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `private_institution_account_group_roles_create`")  # noqa: E501
        # verify the required parameter 'account' is set
        if self.api_client.client_side_validation and ('account' not in params or
                                                       params['account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account` when calling `private_institution_account_group_roles_create`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_id' in params and params['account_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_id` when calling `private_institution_account_group_roles_create`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'account' in params:
            body_params = params['account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/roles/{account_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_institution_accounts_create(self, account, **kwargs):  # noqa: E501
        """Create new Institution Account  # noqa: E501

        Create a new Account by sending account information. When the institution_user_id is provided, no verification email will be sent. The email_verified flag will automatically be set to true. If the institution_user_id is not provided, a verification email will be sent. The email_verified flag will be set to true once the account is created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_accounts_create(account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountCreate account: Account description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_institution_accounts_create_with_http_info(account, **kwargs)  # noqa: E501
        else:
            (data) = self.private_institution_accounts_create_with_http_info(account, **kwargs)  # noqa: E501
            return data

    def private_institution_accounts_create_with_http_info(self, account, **kwargs):  # noqa: E501
        """Create new Institution Account  # noqa: E501

        Create a new Account by sending account information. When the institution_user_id is provided, no verification email will be sent. The email_verified flag will automatically be set to true. If the institution_user_id is not provided, a verification email will be sent. The email_verified flag will be set to true once the account is created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_accounts_create_with_http_info(account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountCreate account: Account description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_accounts_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account' is set
        if self.api_client.client_side_validation and ('account' not in params or
                                                       params['account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account` when calling `private_institution_accounts_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'account' in params:
            body_params = params['account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_institution_accounts_list(self, **kwargs):  # noqa: E501
        """Private Account Institution Accounts  # noqa: E501

        Returns the accounts for which the account has administrative privileges (assigned and inherited).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_accounts_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param int is_active: Filter by active status
        :param str institution_user_id: Filter by institution_user_id
        :param str email: Filter by email
        :param int id_lte: Retrieve accounts with an ID lower or equal to the specified value
        :param int id_gte: Retrieve accounts with an ID greater or equal to the specified value
        :return: list[ShortAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_institution_accounts_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_institution_accounts_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_institution_accounts_list_with_http_info(self, **kwargs):  # noqa: E501
        """Private Account Institution Accounts  # noqa: E501

        Returns the accounts for which the account has administrative privileges (assigned and inherited).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_accounts_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param int is_active: Filter by active status
        :param str institution_user_id: Filter by institution_user_id
        :param str email: Filter by email
        :param int id_lte: Retrieve accounts with an ID lower or equal to the specified value
        :param int id_gte: Retrieve accounts with an ID greater or equal to the specified value
        :return: list[ShortAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'limit', 'offset', 'is_active', 'institution_user_id', 'email', 'id_lte', 'id_gte']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_accounts_list" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('page' in params and params['page'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_institution_accounts_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_institution_accounts_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_institution_accounts_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_institution_accounts_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_institution_accounts_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_institution_accounts_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_institution_accounts_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_institution_accounts_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('is_active' in params and params['is_active'] > 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `is_active` when calling `private_institution_accounts_list`, must be a value less than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('is_active' in params and params['is_active'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `is_active` when calling `private_institution_accounts_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('id_lte' in params and params['id_lte'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `id_lte` when calling `private_institution_accounts_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('id_gte' in params and params['id_gte'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `id_gte` when calling `private_institution_accounts_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'is_active' in params:
            query_params.append(('is_active', params['is_active']))  # noqa: E501
        if 'institution_user_id' in params:
            query_params.append(('institution_user_id', params['institution_user_id']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'id_lte' in params:
            query_params.append(('id_lte', params['id_lte']))  # noqa: E501
        if 'id_gte' in params:
            query_params.append(('id_gte', params['id_gte']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ShortAccount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_institution_accounts_search(self, search, **kwargs):  # noqa: E501
        """Private Account Institution Accounts Search  # noqa: E501

        Returns the accounts for which the account has administrative privileges (assigned and inherited).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_accounts_search(search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InstitutionAccountsSearch search: Search Parameters (required)
        :return: list[ShortAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_institution_accounts_search_with_http_info(search, **kwargs)  # noqa: E501
        else:
            (data) = self.private_institution_accounts_search_with_http_info(search, **kwargs)  # noqa: E501
            return data

    def private_institution_accounts_search_with_http_info(self, search, **kwargs):  # noqa: E501
        """Private Account Institution Accounts Search  # noqa: E501

        Returns the accounts for which the account has administrative privileges (assigned and inherited).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_accounts_search_with_http_info(search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InstitutionAccountsSearch search: Search Parameters (required)
        :return: list[ShortAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_accounts_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search' is set
        if self.api_client.client_side_validation and ('search' not in params or
                                                       params['search'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search` when calling `private_institution_accounts_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/accounts/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ShortAccount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_institution_accounts_update(self, account_id, account, **kwargs):  # noqa: E501
        """Update Institution Account  # noqa: E501

        Update Institution Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_accounts_update(account_id, account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: Account identifier the user is associated to (required)
        :param AccountUpdate account: Account description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_institution_accounts_update_with_http_info(account_id, account, **kwargs)  # noqa: E501
        else:
            (data) = self.private_institution_accounts_update_with_http_info(account_id, account, **kwargs)  # noqa: E501
            return data

    def private_institution_accounts_update_with_http_info(self, account_id, account, **kwargs):  # noqa: E501
        """Update Institution Account  # noqa: E501

        Update Institution Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_accounts_update_with_http_info(account_id, account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: Account identifier the user is associated to (required)
        :param AccountUpdate account: Account description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_accounts_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `private_institution_accounts_update`")  # noqa: E501
        # verify the required parameter 'account' is set
        if self.api_client.client_side_validation and ('account' not in params or
                                                       params['account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account` when calling `private_institution_accounts_update`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_id' in params and params['account_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_id` when calling `private_institution_accounts_update`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'account' in params:
            body_params = params['account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/accounts/{account_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_institution_articles(self, **kwargs):  # noqa: E501
        """Private Institution Articles  # noqa: E501

        Get Articles from own institution. User must be administrator of the institution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_articles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param str published_since: Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param str modified_since: Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param int status: only return collections with this status
        :param str resource_doi: only return collections with this resource_doi
        :param int item_type: Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_institution_articles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_institution_articles_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_institution_articles_with_http_info(self, **kwargs):  # noqa: E501
        """Private Institution Articles  # noqa: E501

        Get Articles from own institution. User must be administrator of the institution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_articles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param str published_since: Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param str modified_since: Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param int status: only return collections with this status
        :param str resource_doi: only return collections with this resource_doi
        :param int item_type: Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'limit', 'offset', 'order', 'order_direction', 'published_since', 'modified_since', 'status', 'resource_doi', 'item_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_articles" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('page' in params and params['page'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_institution_articles`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_institution_articles`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_institution_articles`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_institution_articles`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_institution_articles`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_institution_articles`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_institution_articles`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_institution_articles`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))  # noqa: E501
        if 'published_since' in params:
            query_params.append(('published_since', params['published_since']))  # noqa: E501
        if 'modified_since' in params:
            query_params.append(('modified_since', params['modified_since']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'resource_doi' in params:
            query_params.append(('resource_doi', params['resource_doi']))  # noqa: E501
        if 'item_type' in params:
            query_params.append(('item_type', params['item_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/articles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Article]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_institution_details(self, **kwargs):  # noqa: E501
        """Private Account Institutions  # noqa: E501

        Account institution details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_details(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Institution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_institution_details_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_institution_details_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_institution_details_with_http_info(self, **kwargs):  # noqa: E501
        """Private Account Institutions  # noqa: E501

        Account institution details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_details_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Institution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Institution',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_institution_embargo_options_details(self, **kwargs):  # noqa: E501
        """Private Account Institution embargo options  # noqa: E501

        Account institution embargo options details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_embargo_options_details(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[GroupEmbargoOptions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_institution_embargo_options_details_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_institution_embargo_options_details_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_institution_embargo_options_details_with_http_info(self, **kwargs):  # noqa: E501
        """Private Account Institution embargo options  # noqa: E501

        Account institution embargo options details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_embargo_options_details_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[GroupEmbargoOptions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_embargo_options_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/embargo_options', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GroupEmbargoOptions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_institution_groups_list(self, **kwargs):  # noqa: E501
        """Private Account Institution Groups  # noqa: E501

        Returns the groups for which the account has administrative privileges (assigned and inherited).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_groups_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_institution_groups_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_institution_groups_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_institution_groups_list_with_http_info(self, **kwargs):  # noqa: E501
        """Private Account Institution Groups  # noqa: E501

        Returns the groups for which the account has administrative privileges (assigned and inherited).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_groups_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_groups_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Group]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_institution_roles_list(self, **kwargs):  # noqa: E501
        """Private Account Institution Roles  # noqa: E501

        Returns the roles available for groups and the institution group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_roles_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_institution_roles_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_institution_roles_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_institution_roles_list_with_http_info(self, **kwargs):  # noqa: E501
        """Private Account Institution Roles  # noqa: E501

        Returns the roles available for groups and the institution group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_institution_roles_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_roles_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/institution/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Role]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
