# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProjectsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def private_project_article_delete(self, project_id, article_id, **kwargs):  # noqa: E501
        """Delete project article  # noqa: E501

        Delete project article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_article_delete(project_id, article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_article_delete_with_http_info(project_id, article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_article_delete_with_http_info(project_id, article_id, **kwargs)  # noqa: E501
            return data

    def private_project_article_delete_with_http_info(self, project_id, article_id, **kwargs):  # noqa: E501
        """Delete project article  # noqa: E501

        Delete project article  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_article_delete_with_http_info(project_id, article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_article_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_article_delete`")  # noqa: E501
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_project_article_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_article_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_project_article_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/articles/{article_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_article_details(self, project_id, article_id, **kwargs):  # noqa: E501
        """Project article details  # noqa: E501

        Project article details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_article_details(project_id, article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :return: ProjectArticle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_article_details_with_http_info(project_id, article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_article_details_with_http_info(project_id, article_id, **kwargs)  # noqa: E501
            return data

    def private_project_article_details_with_http_info(self, project_id, article_id, **kwargs):  # noqa: E501
        """Project article details  # noqa: E501

        Project article details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_article_details_with_http_info(project_id, article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :return: ProjectArticle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_article_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_article_details`")  # noqa: E501
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_project_article_details`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_article_details`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_project_article_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/articles/{article_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectArticle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_article_file(self, project_id, article_id, file_id, **kwargs):  # noqa: E501
        """Project article file details  # noqa: E501

        Project article file details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_article_file(project_id, article_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: PrivateFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_article_file_with_http_info(project_id, article_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_article_file_with_http_info(project_id, article_id, file_id, **kwargs)  # noqa: E501
            return data

    def private_project_article_file_with_http_info(self, project_id, article_id, file_id, **kwargs):  # noqa: E501
        """Project article file details  # noqa: E501

        Project article file details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_article_file_with_http_info(project_id, article_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: PrivateFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'article_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_article_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_article_file`")  # noqa: E501
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_project_article_file`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `private_project_article_file`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_article_file`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_project_article_file`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('file_id' in params and params['file_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `file_id` when calling `private_project_article_file`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/articles/{article_id}/files/{file_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrivateFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_article_files(self, project_id, article_id, **kwargs):  # noqa: E501
        """Project article list files  # noqa: E501

        List article files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_article_files(project_id, article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :return: list[PrivateFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_article_files_with_http_info(project_id, article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_article_files_with_http_info(project_id, article_id, **kwargs)  # noqa: E501
            return data

    def private_project_article_files_with_http_info(self, project_id, article_id, **kwargs):  # noqa: E501
        """Project article list files  # noqa: E501

        List article files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_article_files_with_http_info(project_id, article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :return: list[PrivateFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'article_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_article_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_article_files`")  # noqa: E501
        # verify the required parameter 'article_id' is set
        if self.api_client.client_side_validation and ('article_id' not in params or
                                                       params['article_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article_id` when calling `private_project_article_files`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_article_files`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('article_id' in params and params['article_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `article_id` when calling `private_project_article_files`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/articles/{article_id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PrivateFile]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_articles_create(self, project_id, article, **kwargs):  # noqa: E501
        """Create project article  # noqa: E501

        Create a new Article and associate it with this project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_articles_create(project_id, article, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param ArticleProjectCreate article: Article description (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_articles_create_with_http_info(project_id, article, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_articles_create_with_http_info(project_id, article, **kwargs)  # noqa: E501
            return data

    def private_project_articles_create_with_http_info(self, project_id, article, **kwargs):  # noqa: E501
        """Create project article  # noqa: E501

        Create a new Article and associate it with this project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_articles_create_with_http_info(project_id, article, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param ArticleProjectCreate article: Article description (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'article', 'page', 'page_size', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_articles_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_articles_create`")  # noqa: E501
        # verify the required parameter 'article' is set
        if self.api_client.client_side_validation and ('article' not in params or
                                                       params['article'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `article` when calling `private_project_articles_create`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_articles_create`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_project_articles_create`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_project_articles_create`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_project_articles_create`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_project_articles_create`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_project_articles_create`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_project_articles_create`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_project_articles_create`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_project_articles_create`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'article' in params:
            body_params = params['article']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/articles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_articles_list(self, project_id, **kwargs):  # noqa: E501
        """List project articles  # noqa: E501

        List project articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_articles_list(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_articles_list_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_articles_list_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def private_project_articles_list_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """List project articles  # noqa: E501

        List project articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_articles_list_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'page', 'page_size', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_articles_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_articles_list`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_project_articles_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_project_articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_project_articles_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_project_articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_project_articles_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_project_articles_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_project_articles_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_project_articles_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/articles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Article]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_collaborator_delete(self, project_id, user_id, **kwargs):  # noqa: E501
        """Remove project collaborator  # noqa: E501

        Remove project collaborator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_collaborator_delete(project_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int user_id: User unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_collaborator_delete_with_http_info(project_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_collaborator_delete_with_http_info(project_id, user_id, **kwargs)  # noqa: E501
            return data

    def private_project_collaborator_delete_with_http_info(self, project_id, user_id, **kwargs):  # noqa: E501
        """Remove project collaborator  # noqa: E501

        Remove project collaborator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_collaborator_delete_with_http_info(project_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int user_id: User unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_collaborator_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_collaborator_delete`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `private_project_collaborator_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_collaborator_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('user_id' in params and params['user_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `user_id` when calling `private_project_collaborator_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/collaborators/{user_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_collaborators_invite(self, project_id, collaborator, **kwargs):  # noqa: E501
        """Invite project collaborators  # noqa: E501

        Invite users to collaborate on project or view the project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_collaborators_invite(project_id, collaborator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param ProjectCollaboratorInvite collaborator: viewer or collaborator role. User user_id or email of user (required)
        :return: ResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_collaborators_invite_with_http_info(project_id, collaborator, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_collaborators_invite_with_http_info(project_id, collaborator, **kwargs)  # noqa: E501
            return data

    def private_project_collaborators_invite_with_http_info(self, project_id, collaborator, **kwargs):  # noqa: E501
        """Invite project collaborators  # noqa: E501

        Invite users to collaborate on project or view the project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_collaborators_invite_with_http_info(project_id, collaborator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param ProjectCollaboratorInvite collaborator: viewer or collaborator role. User user_id or email of user (required)
        :return: ResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'collaborator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_collaborators_invite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_collaborators_invite`")  # noqa: E501
        # verify the required parameter 'collaborator' is set
        if self.api_client.client_side_validation and ('collaborator' not in params or
                                                       params['collaborator'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collaborator` when calling `private_project_collaborators_invite`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_collaborators_invite`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'collaborator' in params:
            body_params = params['collaborator']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/collaborators', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_collaborators_list(self, project_id, **kwargs):  # noqa: E501
        """List project collaborators  # noqa: E501

        List Project collaborators and invited users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_collaborators_list(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :return: list[ProjectCollaborator]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_collaborators_list_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_collaborators_list_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def private_project_collaborators_list_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """List project collaborators  # noqa: E501

        List Project collaborators and invited users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_collaborators_list_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :return: list[ProjectCollaborator]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_collaborators_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_collaborators_list`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_collaborators_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/collaborators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProjectCollaborator]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_create(self, project, **kwargs):  # noqa: E501
        """Create project  # noqa: E501

        Create a new project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_create(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectCreate project: Project  description (required)
        :return: CreateProjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_create_with_http_info(project, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_create_with_http_info(project, **kwargs)  # noqa: E501
            return data

    def private_project_create_with_http_info(self, project, **kwargs):  # noqa: E501
        """Create project  # noqa: E501

        Create a new project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_create_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectCreate project: Project  description (required)
        :return: CreateProjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in params or
                                                       params['project'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project` when calling `private_project_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'project' in params:
            body_params = params['project']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateProjectResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_delete(self, project_id, **kwargs):  # noqa: E501
        """Delete project  # noqa: E501

        A project can be deleted only if: - it is not public - it does not have public articles.  When an individual project is deleted, all the articles are moved to my data of each owner.  When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_delete(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_delete_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_delete_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def private_project_delete_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Delete project  # noqa: E501

        A project can be deleted only if: - it is not public - it does not have public articles.  When an individual project is deleted, all the articles are moved to my data of each owner.  When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_delete_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_details(self, project_id, **kwargs):  # noqa: E501
        """View project details  # noqa: E501

        View a private project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_details(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :return: ProjectCompletePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_details_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_details_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def private_project_details_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """View project details  # noqa: E501

        View a private project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_details_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :return: ProjectCompletePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_details`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectCompletePrivate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_leave(self, project_id, **kwargs):  # noqa: E501
        """Private Project Leave  # noqa: E501

        Please note: project's owner cannot leave the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_leave(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_leave_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_leave_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def private_project_leave_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Private Project Leave  # noqa: E501

        Please note: project's owner cannot leave the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_leave_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_leave" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_leave`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_leave`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/leave', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_note(self, project_id, note_id, **kwargs):  # noqa: E501
        """Project note details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_note(project_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int note_id: Note unique identifier (required)
        :return: ProjectNotePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_note_with_http_info(project_id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_note_with_http_info(project_id, note_id, **kwargs)  # noqa: E501
            return data

    def private_project_note_with_http_info(self, project_id, note_id, **kwargs):  # noqa: E501
        """Project note details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_note_with_http_info(project_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int note_id: Note unique identifier (required)
        :return: ProjectNotePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in params or
                                                       params['note_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `note_id` when calling `private_project_note`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_note`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('note_id' in params and params['note_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `note_id` when calling `private_project_note`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/notes/{note_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectNotePrivate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_note_delete(self, project_id, note_id, **kwargs):  # noqa: E501
        """Delete project note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_note_delete(project_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int note_id: Note unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_note_delete_with_http_info(project_id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_note_delete_with_http_info(project_id, note_id, **kwargs)  # noqa: E501
            return data

    def private_project_note_delete_with_http_info(self, project_id, note_id, **kwargs):  # noqa: E501
        """Delete project note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_note_delete_with_http_info(project_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int note_id: Note unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_note_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_note_delete`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in params or
                                                       params['note_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `note_id` when calling `private_project_note_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_note_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('note_id' in params and params['note_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `note_id` when calling `private_project_note_delete`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/notes/{note_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_note_update(self, project_id, note_id, note, **kwargs):  # noqa: E501
        """Update project note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_note_update(project_id, note_id, note, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int note_id: Note unique identifier (required)
        :param ProjectNoteCreate note: Note message (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_note_update_with_http_info(project_id, note_id, note, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_note_update_with_http_info(project_id, note_id, note, **kwargs)  # noqa: E501
            return data

    def private_project_note_update_with_http_info(self, project_id, note_id, note, **kwargs):  # noqa: E501
        """Update project note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_note_update_with_http_info(project_id, note_id, note, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int note_id: Note unique identifier (required)
        :param ProjectNoteCreate note: Note message (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'note_id', 'note']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_note_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_note_update`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in params or
                                                       params['note_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `note_id` when calling `private_project_note_update`")  # noqa: E501
        # verify the required parameter 'note' is set
        if self.api_client.client_side_validation and ('note' not in params or
                                                       params['note'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `note` when calling `private_project_note_update`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_note_update`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('note_id' in params and params['note_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `note_id` when calling `private_project_note_update`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'note' in params:
            body_params = params['note']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/notes/{note_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_notes_create(self, project_id, note, **kwargs):  # noqa: E501
        """Create project note  # noqa: E501

        Create a new project note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_notes_create(project_id, note, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param ProjectNoteCreate note: Note message (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_notes_create_with_http_info(project_id, note, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_notes_create_with_http_info(project_id, note, **kwargs)  # noqa: E501
            return data

    def private_project_notes_create_with_http_info(self, project_id, note, **kwargs):  # noqa: E501
        """Create project note  # noqa: E501

        Create a new project note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_notes_create_with_http_info(project_id, note, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param ProjectNoteCreate note: Note message (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'note']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_notes_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_notes_create`")  # noqa: E501
        # verify the required parameter 'note' is set
        if self.api_client.client_side_validation and ('note' not in params or
                                                       params['note'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `note` when calling `private_project_notes_create`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_notes_create`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'note' in params:
            body_params = params['note']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_notes_list(self, project_id, **kwargs):  # noqa: E501
        """List project notes  # noqa: E501

        List project notes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_notes_list(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[ProjectNote]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_notes_list_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_notes_list_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def private_project_notes_list_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """List project notes  # noqa: E501

        List project notes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_notes_list_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[ProjectNote]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'page', 'page_size', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_notes_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_notes_list`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_notes_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_project_notes_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_project_notes_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_project_notes_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_project_notes_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_project_notes_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_project_notes_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_project_notes_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_project_notes_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProjectNote]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_publish(self, project_id, **kwargs):  # noqa: E501
        """Private Project Publish  # noqa: E501

        Publish a project. Possible after all items inside it are public  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_publish(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :return: ResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_publish_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_publish_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def private_project_publish_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Private Project Publish  # noqa: E501

        Publish a project. Possible after all items inside it are public  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_publish_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :return: ResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_publish" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_publish`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_publish`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}/publish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_project_update(self, project_id, project, **kwargs):  # noqa: E501
        """Update project  # noqa: E501

        Updating an project by passing body parameters; request can also be made with the PATCH method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_update(project_id, project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param ProjectUpdate project: Project description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_project_update_with_http_info(project_id, project, **kwargs)  # noqa: E501
        else:
            (data) = self.private_project_update_with_http_info(project_id, project, **kwargs)  # noqa: E501
            return data

    def private_project_update_with_http_info(self, project_id, project, **kwargs):  # noqa: E501
        """Update project  # noqa: E501

        Updating an project by passing body parameters; request can also be made with the PATCH method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_project_update_with_http_info(project_id, project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project unique identifier (required)
        :param ProjectUpdate project: Project description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'project']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_update`")  # noqa: E501
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in params or
                                                       params['project'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project` when calling `private_project_update`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_update`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'project' in params:
            body_params = params['project']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/{project_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_projects_list(self, **kwargs):  # noqa: E501
        """Private Projects  # noqa: E501

        List private projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_projects_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order.
        :param str order_direction:
        :param str storage: only return collections from this institution
        :param str roles: Any combination of owner, collaborator, viewer separated by comma. Examples: \"owner\" or \"owner,collaborator\".
        :return: list[ProjectPrivate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_projects_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_projects_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_projects_list_with_http_info(self, **kwargs):  # noqa: E501
        """Private Projects  # noqa: E501

        List private projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_projects_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order.
        :param str order_direction:
        :param str storage: only return collections from this institution
        :param str roles: Any combination of owner, collaborator, viewer separated by comma. Examples: \"owner\" or \"owner,collaborator\".
        :return: list[ProjectPrivate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'limit', 'offset', 'order', 'order_direction', 'storage', 'roles']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_projects_list" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('page' in params and params['page'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_projects_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `private_projects_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_projects_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `private_projects_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_projects_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `private_projects_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_projects_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `private_projects_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))  # noqa: E501
        if 'storage' in params:
            query_params.append(('storage', params['storage']))  # noqa: E501
        if 'roles' in params:
            query_params.append(('roles', params['roles']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProjectPrivate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_projects_search(self, **kwargs):  # noqa: E501
        """Private Projects search  # noqa: E501

        Search inside the private projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_projects_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectsSearch search: Search Parameters
        :return: list[ProjectPrivate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_projects_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_projects_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_projects_search_with_http_info(self, **kwargs):  # noqa: E501
        """Private Projects search  # noqa: E501

        Search inside the private projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_projects_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectsSearch search: Search Parameters
        :return: list[ProjectPrivate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_projects_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/projects/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProjectPrivate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_articles(self, project_id, **kwargs):  # noqa: E501
        """Public Project Articles  # noqa: E501

        List articles in project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_articles(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project Unique identifier (required)
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_articles_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_articles_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def project_articles_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Public Project Articles  # noqa: E501

        List articles in project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_articles_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project Unique identifier (required)
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_articles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `project_articles`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `project_articles`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/articles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Article]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_details(self, project_id, **kwargs):  # noqa: E501
        """Public Project  # noqa: E501

        View a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_details(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project Unique identifier (required)
        :return: ProjectComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_details_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_details_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def project_details_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Public Project  # noqa: E501

        View a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_details_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project Unique identifier (required)
        :return: ProjectComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `project_details`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in params and params['project_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `project_id` when calling `project_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectComplete',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_list(self, **kwargs):  # noqa: E501
        """Public Projects  # noqa: E501

        Returns a list of public projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param int institution: only return collections from this institution
        :param str published_since: Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param int group: only return collections from this group
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.projects_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def projects_list_with_http_info(self, **kwargs):  # noqa: E501
        """Public Projects  # noqa: E501

        Returns a list of public projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param int institution: only return collections from this institution
        :param str published_since: Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param int group: only return collections from this group
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_cursor', 'page', 'page_size', 'limit', 'offset', 'order', 'order_direction', 'institution', 'published_since', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_list" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('page' in params and params['page'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `projects_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `projects_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `projects_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `projects_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `projects_list`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `projects_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 5000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `projects_list`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `projects_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))  # noqa: E501
        if 'institution' in params:
            query_params.append(('institution', params['institution']))  # noqa: E501
        if 'published_since' in params:
            query_params.append(('published_since', params['published_since']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501

        header_params = {}
        if 'x_cursor' in params:
            header_params['X-Cursor'] = params['x_cursor']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Project]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_search(self, **kwargs):  # noqa: E501
        """Public Projects Search  # noqa: E501

        Returns a list of public articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param ProjectsSearch search: Search Parameters
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.projects_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def projects_search_with_http_info(self, **kwargs):  # noqa: E501
        """Public Projects Search  # noqa: E501

        Returns a list of public articles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param ProjectsSearch search: Search Parameters
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_cursor', 'search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_cursor' in params:
            header_params['X-Cursor'] = params['x_cursor']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/projects/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Project]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
